(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{440:function(a,v,t){"use strict";t.r(v);var _=t(62),r=Object(_.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java开发手册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java开发手册"}},[a._v("#")]),a._v(" Java开发手册")]),a._v(" "),t("h2",{attrs:{id:"第一章-计算机基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一章-计算机基础"}},[a._v("#")]),a._v(" 第一章 计算机基础")]),a._v(" "),t("h3",{attrs:{id:"浮点数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[a._v("#")]),a._v(" 浮点数：")]),a._v(" "),t("p",[a._v("在要求绝对精确表示的业务场景下，比如金融行业的货币表示，推荐使用整型存储其最小单位的值，展示时可以转换成该货币的常用单位，比如人民币使用分存储，美元使用美分存储。在要求精确表示小数点n位的业务场景下，推荐采用数组保存小数部分的数据。")]),a._v(" "),t("p",[a._v("禁止通过判断两个浮点数是否相等来扩展业务流程，因为浮点数会存在误差。在数据库中保存小数时，推荐使用decimal类型，禁止使用float类型和double类型。因为这两种类型在存储的时候，存在精度损失的问题。")]),a._v(" "),t("h3",{attrs:{id:"字符集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符集"}},[a._v("#")]),a._v(" 字符集：")]),a._v(" "),t("p",[a._v('ASCII码中，有两个特殊的控制字符10和13，前者是LF即"\\n"，后者是CR即"\\r"')]),a._v(" "),t("p",[a._v('UNIX系统中，换行符"\\n"，Windows系统中，换行使用"\\r\\n"，在旧版macOS中，换行使用"\\r"，新版macOS中使用与UNIX系统相同的换行方式。')]),a._v(" "),t("p",[a._v("Unicode为每种语言中的每个字符都设定了唯一编码，以满足跨语言的交流，分为编码方式和实现方式。")]),a._v(" "),t("p",[a._v("UTF(Unicode Transformation Format)即Unicode字符集转换格式，可以理解为对Unicode的压缩方式。UTF-8是一种以字节为单位，针对Unicode字符进行编码压缩，目的是用较少的字节表示最常用的字符。此规则能有效地降低数据存储和传输成本。")]),a._v(" "),t("p",[a._v("为了防止乱码，所有情况下的字符集设置最好是一致的。")]),a._v(" "),t("h3",{attrs:{id:"内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[a._v("#")]),a._v(" 内存：")]),a._v(" "),t("p",[a._v("Java内存交给JVM进行自动分配与释放，这个过程称为垃圾回收机制。虽然垃圾回收机制能为程序员减负，但如果不加节制的话，同样会耗尽内存资源。")]),a._v(" "),t("h3",{attrs:{id:"数据库连接池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池"}},[a._v("#")]),a._v(" 数据库连接池：")]),a._v(" "),t("p",[a._v("连接资源在数据库端是一种非常关键且有限的系统资源。连接过多往往会严重影响数据库性能。数据库连接池负责分配、管理和释放连接，这是一种以内存空间换取时间的策略，能够明显地提升数据库操作的性能。但如果数据库连接管理不善，也会影响到整个应用集群的吞吐量。连接池配置错误加上慢SQL，就像屋漏偏逢连夜雨，可以瞬间让一个系统进入服务超时假死宕机状态。")]),a._v(" "),t("h3",{attrs:{id:"druid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#druid"}},[a._v("#")]),a._v(" Druid：")]),a._v(" "),t("p",[a._v("Druid是阿里巴巴一个数据库连接池开源框架，准确来说它不仅仅包括数据库连接池，还提供了强大的监控和扩展功能。当应用启动时，连接池初始化最小连接数(MIN)，当外部请求到达时，直接使用空闲连接即可。假如并发数达到最大(MAX)，则需要等待，直到超时。如果一直未拿到连接，就会抛出异常。")]),a._v(" "),t("p",[a._v("一般可以把连接池的最大连接数设置在30个左右。")]),a._v(" "),t("p",[a._v("一般来说，数据库层面的请求应答时间必须在100ms以内，秒级的SQL查询通常存在巨大的性能提升空间，有如下应对方案：")]),a._v(" "),t("ol",[t("li",[a._v("建立高效且合适的索引。索引既有数据特征，又有业务特征，数据量的变化会影响索引的选择，业务特点不一样，索引的优化思路也不一样。通常某个字段平时不用，但是某种触发场景下命中“索引缺失”的字段会导致查询瞬间变慢。所以，要事先明确业务场景，建立合适的索引。")]),a._v(" "),t("li",[a._v("排查连接资源未显示关闭的情形。要特别注意在ThreadLocal或流式计算中使用数据库连接的地方。")]),a._v(" "),t("li",[a._v("合并短的请求。根据CPU的空间局部性原理，对于相近的数据，CPU会一起提取到内存中。另外，合并请求也可以有效减少连接的次数。")]),a._v(" "),t("li",[a._v("合理拆分多个表join的SQL，若是超过三个表则禁止join。如果表结构建的不合理，应用逻辑处理不当，业务模型抽象有问题，那么三表join的数据量由于笛卡儿积操作会呈几何级数增加，所以不推荐这样的做法。另外，对于需要join的字段，数据类型应保持绝对一致。多表关联查询时， 应确保被关联的字段要有索引")]),a._v(" "),t("li",[a._v("使用临时表。某种情况下，该方法是一种比较好的选择。在不断的嵌套查询中，已经无法很好地利用现有的索引提升查询效率，所以把中间结果保存到临时表，然后重建索引，再通过临时表进行后续的数据操作。")]),a._v(" "),t("li",[a._v("应用层优化。包括进行数据结构优化。并发多线程改造等。")]),a._v(" "),t("li",[a._v("改用其他数据库。因为不同数据库针对的业务场景是不同的，比如Cassandra、MongoDB")])]),a._v(" "),t("h3",{attrs:{id:"信息安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#信息安全"}},[a._v("#")]),a._v(" 信息安全")]),a._v(" "),t("p",[a._v("黑客攻击大体分为非破坏性攻击和破坏性攻击。非破坏性攻击一般是为了扰乱系统的运行，使之暂时失去正常对外提供信息的能力，比如DDoS攻击等。破坏性攻击主要会造成两种后果：系统数据受损或者信息被窃取，比如CSRF攻击等。黑客使用的攻击手段有病毒式、洪水式、系统漏洞式等。")]),a._v(" "),t("p",[a._v("信息安全体系遵循CIA原则，即保密性（Confidentiality）、完整性（Integrity）、可用性（Availability）。")]),a._v(" "),t("ul",[t("li",[a._v("保密性。对数据进行加密，存储、传输过程中都需要对数据进行加密。")]),a._v(" "),t("li",[a._v("完整性。通常的做法是对数据进行签名和校验（比如MD5和数字签名等）。")]),a._v(" "),t("li",[a._v("可用性。使用访问控制、限流等手段防止大量访问攻击。")])]),a._v(" "),t("h3",{attrs:{id:"sql注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql注入"}},[a._v("#")]),a._v(" SQL注入")]),a._v(" "),t("p",[a._v("SQL注入式攻击是未将代码与数据进行严格的隔离，导致在读取用户数据的时候，错误地把数据作为代码的一部分执行，从而导致一些安全问题。")]),a._v(" "),t("p",[a._v("典型的SQL注入例子是当对SQL语句进行字符串拼接操作时，直接使用未加转义的用户输入内容作为变量。")]),a._v(" "),t("h4",{attrs:{id:"预防"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预防"}},[a._v("#")]),a._v(" 预防")]),a._v(" "),t("ol",[t("li",[a._v("过滤用户输入参数中的特殊字符，从而降低被SQL注入的风险。")]),a._v(" "),t("li",[a._v("禁止通过字符串拼接的SQL语句，严格使用参数绑定传入的SQL参数。")]),a._v(" "),t("li",[a._v("合理使用数据库访问框架的防注入机制。比如Mybatis提供的#{}绑定参数，从而防止SQL注入。同时谨慎使用``${}"),t("code",[a._v(",")]),a._v("${}`相当于使用字符串拼接SQL。拒接拼接的SQL语句，使用参数化的语句。")])]),a._v(" "),t("h3",{attrs:{id:"xss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[a._v("#")]),a._v(" XSS")]),a._v(" "),t("p",[a._v("跨站脚本攻击，即Cross-Site Scripting，指黑客通过技术手段，向正常用户请求的HTML页面插入恶意脚本，从而可以执行任意脚本。XSS主要分为反射型XSS、存储型XSS和DOM型XSS。XSS主要用于信息窃取、破坏等目的。")]),a._v(" "),t("p",[a._v("在防范XSS上，主要通过对用户输入数据做过滤或者转义。比如Java开发人员可以使用Jsoup框架对用户输入字符串做XSS过滤，或者使用框架提供的工具类对用户输入的字符串做HTML转义，例如Spring框架提供的HtmlUtils。前端在浏览器展示数据时，也需要使用安全的API展示数据，比如使用innerText而不是innerHtml。所以前后端开发人员一同配合才能有效防范XSS漏洞。")]),a._v(" "),t("h3",{attrs:{id:"csrf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[a._v("#")]),a._v(" CSRF")]),a._v(" "),t("p",[a._v("跨站请求伪造（Cross-Site Request Forgery），简称CSRF，也被称为One-click Attack，即在用户并不知情的情况下，冒充用户发起请求，在当前已经登录的Web应用程序上执行恶意操作，如恶意发帖、修改密码、发邮件等。")]),a._v(" "),t("p",[a._v("XSS是在正常用户请求的HTML页面中执行了黑客提供的恶意代码；CSRF是黑客直接盗用用户浏览器中的登录信息，冒充用户去执行黑客指定的操作。XSS问题出在用户数据没有过滤、转义；CSRF问题处在HTTP接口没有防范不受信任的调用。")]),a._v(" "),t("p",[a._v("防范 CSRF 漏洞主要通过以下方式。")]),a._v(" "),t("ol",[t("li",[a._v("CSRF Token 验证，利用浏览器的同源限制，在 HTTP 接口执行前验证页面 或者 Cookie 中设置的 Token ，只有验证通过才继续执行请求。")]),a._v(" "),t("li",[a._v("人机交互 ，比如在调用上述网上银行转账接口时校验短信验证码。")])]),a._v(" "),t("h2",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[a._v("#")]),a._v(" 面向对象")]),a._v(" "),t("p",[a._v("面向对象编程（Object-Oriented Programming，OOP）")]),a._v(" "),t("p",[a._v("三大特性封装、继承、多态、抽象(第四大特性)")]),a._v(" "),t("p",[a._v("有效降低了软件开发成本、维护成本和复用成本。")]),a._v(" "),t("p",[a._v("OOP实践了软件工程的三个主要目标：可维护性、可重用性和可扩展性。")]),a._v(" "),t("h3",{attrs:{id:"抽象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[a._v("#")]),a._v(" 抽象")]),a._v(" "),t("p",[a._v("抽象是程序员的核心素质之 一，体现出程序员对业务的建模能力，以及对架构的宏观掌控力。虽然面向过程也需要进行一定的抽象能力，但是相对来说，面向对象思维，以对象模型为核心；丰富模型的内涵，扩展模型的外延，通过模型的行为组合去共同解决某一类问题，抽象 能力显得尤为重要；封装是一种对象功能内聚的表现形式，使模块之间耦合度变低，更具有维护性；继承使子类能够继承父类，获得父类的部分属性和行为，使模块更有复用性；多态使模块在复用性基础上更加有扩展性，使运行期更有想象空间。")]),a._v(" "),t("p",[a._v("抽象是面向对象思想最基础的能力之一，正确而严谨的业务抽象和建模分析能力是后续的封装、继承、多态的基础，是软件大厦的基石。在面向对象的思维中，抽象分为归纳和演绎。前者是从具体到本质，从个性到共性，将一类对象的共同特征进行归一化的逻辑思维过程；后者则是从本质到具体，从共性到个性，逐步形象化的过程。 在归纳的过程中，需要抽象出对象的属性和行为的共性，难度大于演绎。演绎是在已有问题解决方案的基础上，正确地找到合适的使用场景。演绎错误在使用集合时比较常见，比如针对查多改少的业务场景，使用链表是非常不合理的，底层框架技术选型 时如果有错误，则有可能导致技术架构完全不适应业务的快速发展。")]),a._v(" "),t("h3",{attrs:{id:"object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[a._v("#")]),a._v(" Object")]),a._v(" "),t("p",[a._v("Java 之父 Gosling 设计的 Object 类，是任何类的默认父类，是对万事万物的抽象， 是在哲学方向上进行的延伸思考，高度概括了事物的自然行为和社会行为。")]),a._v(" "),t("h4",{attrs:{id:"clone"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clone"}},[a._v("#")]),a._v(" clone()")]),a._v(" "),t("p",[a._v("clone ()方法分为浅拷贝、一般深拷贝和彻底深拷贝。浅拷贝只复制当前对象的所有基本数据类型，以及相应的引用变量，但没有复制引用变量指向的实际对象，而彻底深拷贝是在成功 clone 一个对象之后，此对象与母对象在任何引用路径上都不存在共享的实例对象，但是引用路径递归越深，则越接近 JVM底层对象，且发现彻底深拷贝实现难度越大。介于浅拷贝和彻底深拷贝之间的都是一般深拷贝。归根结底，慎用Object的clone ()方法来拷贝对象，因为对象的 clone() 方法默认是浅拷贝，若想实现深拷贝，则需要覆写 clone()方法实现引用对象的深度遍历式 拷贝。")]),a._v(" "),t("h3",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[a._v("#")]),a._v(" 封装")]),a._v(" "),t("p",[a._v("封装是在抽象基础上决定信息是否公开，以及公开等级，核心问题是以什么样的方式暴露哪些信息。抽象是要找到属性和行为的共性，属性是行为的基本生产资料， 具有一定的敏感性，不能直接对外暴露；封装的主要任务是对属性、数据、部分内部敏感行为实现隐藏。对属性的访问与修改必须通过定义的公共接口来进行，某些敏感方法或者外部不需要感知的复杂逻辑处理，一般也会进行封装。封装使面向对象的世界变得单纯，对象之间的关系变得简单，各人自扫门前雪，耦合度变弱，有利于维护。智能化的时代，对封装的要求越来越高，产品使用更加简单方便、轻松自然。就像天猫精灵，唯一的接口就是语音输入，隐藏了指令内部的细节实现和相关数据，使外部用户无法访问，大大降低了使用成本，有效地保护内部数据安全。")]),a._v(" "),t("p",[a._v("设计模式七大原则之一的迪米特法则就是对于封装的具体要求，即A模块使用B模块的某个接口行为，对B模块中除此行为之外的其他信息知道得尽可能少。比如：耳塞的插孔就是提供声音输出的行为接口，只需关心这个插孔是否有相应的耳塞标记，是否是圆形的，有没有声音即可，至于内部 CPU 如何运算音频信息，以及各个电容如何协同工作，根本不需要去关注，这使模块之间的协作只需忠于接口、忠于功能实现即可。")]),a._v(" "),t("p",[a._v("封装这件事情是由俭入奢易，由奢入俭难。属性值的访问与修改需要使用相应的 ge tter/setter 方法，而不是直接对 public 的属性进行读取和修改，可能有些程序员存在疑问，既然通过这两个方法来读取和修改，那与直接对属性进行操作有何区别？如果某一天，类的提供方想在修改属性的 setter 方法上进行鉴权控制、日志记录，这是在直接访问属性的情形中无法做到的。若是将已经公开的属性和行为直接暴力修改为 private ，则依赖模块都会编译出错。所以，在不知道什么样的访问控制权限合适的时候， 优先推荐使用 private 控制级别。")]),a._v(" "),t("h3",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),t("p",[a._v("继承是面向对象编程技术的基石，允许创建具有逻辑等级结构的类体系，形成一个继承树，让软件在业务多变的客观条件下，某些基础模块可以被直接复用、间接复用或增强复用，父类的能力通过这种方式赋予子类。继承把枯燥的代码世界变得更有层次感，更有扩展性，为多态打下语法基础。")]),a._v(" "),t("p",[a._v("人人都说继承是 is-a 关系，那么如何衡量当前的继承关系是否满足 is-a 关系呢？ 判断标准即是否符合里氏代换原则（ Liskov Substitution Principle, LSP ）。LSP 是指任何父类能够出现的地方，子类都能够出现。从字面上很难深入理解，先打个比方，警察在枪战片中经常说放下武器，把手举起来！而对面的匪徒们有的使用手枪，有的使用匕首 这些都是武器的子类。父类出现的地方 即“放下武器” 那么，放下手枪，是对的，放下匕首，也是对的｜在实际代码环境中，如果父类引用直接使用子类引用来代替，可以编译正确并执行，输出结果符合子类场景的预期，那么说明两个 类之间符合 LSP 原则，可以使用继承关系。")]),a._v(" "),t("p",[a._v("继承的使用成本很低，一个关键字就可以使用别人的方法，似乎更加轻量简单。 想复用别人的代码，跳至脑海的第一反应是继承它，所以继承像抗生素一样容易被滥用，我们传递的理念是谨慎使用继承，认清继承滥用的危害性，即方法污染和方法爆炸。方法污染是指父类具备的行为通过继承传递给子类，子类并不具备执行此行为的能力 ，比如鸟会飞，驼鸟继承鸟，发现飞不了，这就是方法污染。子类继承父类，则说明子类对象可以调用父类对象的一切行为。在这样的情况下，总不能在继承时，添加注释说明哪几个父类方法不能在子类中执行，更不能覆写这些无法执行的父类方法，抛出异常，以阻止别人的调用。方法爆炸是指继承树不断扩大，底层类拥有的方法虽然都能够执行，但是由于方法众多，其中部分方法并非与当前类的功能定位相关， 很容易在实际编程中产生选择困难症。比如某些综合功能的类，经过多次继承后达到上百个方法，造成了方法爆炸，因而带来使用不便和安全隐患。在实际故障中，因为 方法爆炸，父类的某些方法签名和子类非常相似，在 IDE 中，输人类名＋点之后，在自动提示的极为相似的方法签名中选择错误，导致线上异常。综上所述，提倡组合优先原则来扩展类的能力，即优先采用组合或聚合的类关系来复用其他类的能力，而不是继承。")]),a._v(" "),t("h3",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),t("p",[a._v('多态是以上述的三个面向对象特性为基础，根据运行时的实际对象类型，同一个方法产生不同的运行结果，使同一个行为具有不同的表现形式。多态是面向对象天空 中绚丽多彩的礼花，提升了对象的扩展能力和运行时的丰富想象力。我们来明确两个非常容易混淆的概念："override"和"overload"，"override"译成“覆写”， 是子类实现接口，或者继承父类时，保持方法签名完全相同，实现不同的方法体，是垂直方向上行为的不同实现。"overload" 译成“重载”，方法名称是相同的，但是参数类型或参数个数是不相同的，是水平方向上行为的不同实现。多态是指在编译层面无法确定最终调用的方法体 以覆写为基础来实现面向对象特性，在运行期由JVM进行动态绑定，调用合适的覆写方法体来执行。重载是编译期确定方法调用，属于静态绑定，本质上重载的结果是完全不同的方法，所以本书认为多态专指覆写。自然界的多态最典型例子就是碳家族，据说某化学家告诉他女朋友将在她的生日晚会上送她一块碳，女朋友当然不高兴，可收到的却是5克拉的钻石。钻石就是碳元素在不断进化 过程中的一种多态表现。严格意义上来说，多态并不是面向对象的一种特质，而是一种由继承行为衍生而来的进化能力而已。')])])}),[],!1,null,null,null);v.default=r.exports}}]);