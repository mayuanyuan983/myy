(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{443:function(v,_,a){"use strict";a.r(_);var t=a(62),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"面试-java基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试-java基础"}},[v._v("#")]),v._v(" 面试--Java基础")]),v._v(" "),a("h2",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[v._v("#")]),v._v(" 面向对象")]),v._v(" "),a("p",[v._v("OOP：面向对象编程")]),v._v(" "),a("p",[v._v("面向对象是一种思想，世间万物都可以看做一个对象。")]),v._v(" "),a("p",[v._v("Java是一个支持并发、基于类和面向对象的计算机编程语言。")]),v._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[v._v("#")]),v._v(" 优点：")]),v._v(" "),a("ul",[a("li",[v._v("代码开发模块化，更易维护和修改。")]),v._v(" "),a("li",[v._v("代码复用性强。")]),v._v(" "),a("li",[v._v("增强代码的可靠性和灵活性")]),v._v(" "),a("li",[v._v("增加代码的可读性。")])]),v._v(" "),a("h3",{attrs:{id:"特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特征"}},[v._v("#")]),v._v(" 特征")]),v._v(" "),a("ul",[a("li",[v._v("封装")]),v._v(" "),a("li",[v._v("继承")]),v._v(" "),a("li",[v._v("多态")]),v._v(" "),a("li",[v._v("抽象")])]),v._v(" "),a("h3",{attrs:{id:"面向对象和面向过程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别"}},[v._v("#")]),v._v(" 面向对象和面向过程的区别")]),v._v(" "),a("ul",[a("li",[v._v("面向过程\n"),a("ul",[a("li",[v._v("优点：性能更高，因为类调用时需要实例化，开销比较大，比较消耗资源")]),v._v(" "),a("li",[v._v("缺点：没有面向对象易维护、易复用、易扩展")])])]),v._v(" "),a("li",[v._v("面向对象\n"),a("ul",[a("li",[v._v("优点：易维护、易复用、易扩展，因为封装、继承、多态的特性，可以设计出低耦合的系统，使得系统更加灵活、更易于维护")]),v._v(" "),a("li",[v._v("缺点：性能低")])])])]),v._v(" "),a("h3",{attrs:{id:"重载和重写的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[v._v("#")]),v._v(" 重载和重写的区别")]),v._v(" "),a("ul",[a("li",[v._v("重写\n"),a("ul",[a("li",[v._v("方法名、参数、返回值相同")]),v._v(" "),a("li",[v._v("子类不能缩小父类方法的访问权限")]),v._v(" "),a("li",[v._v("子类不能抛出比父类更多的异常，子类可以不抛出异常")]),v._v(" "),a("li",[v._v("存在于父类和子类之间")]),v._v(" "),a("li",[v._v("方法被定义为"),a("code",[v._v("final")]),v._v("不能被重写")])])]),v._v(" "),a("li",[v._v("重载\n"),a("ul",[a("li",[v._v("参数类型、个数、顺序至少有一个不同")]),v._v(" "),a("li",[v._v("不能重载只有返回值不同的方法")]),v._v(" "),a("li",[v._v("存在于父类和子类、同类中")])])])]),v._v(" "),a("h3",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[v._v("#")]),v._v(" 构造方法")]),v._v(" "),a("p",[v._v("对象创建的时候，构造方法会被调用，每个类都有一个构造方法。未创建构造方法时，会有一个默认的构造方法。可以为类创建多个构造方法，每个构造方法必须有唯一的参数列表。")]),v._v(" "),a("h2",{attrs:{id:"jdk、jre、jvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk、jre、jvm"}},[v._v("#")]),v._v(" JDK、JRE、JVM")]),v._v(" "),a("p",[v._v("JDK：Java开发工具包，包含编写Java程序必须的编译、运行等开发工具以及JRE")]),v._v(" "),a("p",[v._v("JRE：Java运行环境，运行Java程序必须的环境，包含JVM和系统类库")]),v._v(" "),a("p",[v._v("JVM：Java虚拟机，提供字节码文件的运行环境支持")]),v._v(" "),a("p",[v._v("JDK包含JRE包含JVM")]),v._v(" "),a("h3",{attrs:{id:"java为什么是平台无关的编程语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java为什么是平台无关的编程语言"}},[v._v("#")]),v._v(" Java为什么是平台无关的编程语言")]),v._v(" "),a("p",[v._v("Java虚拟机是一个可以执行Java字节码的虚拟机进程。")]),v._v(" "),a("p",[v._v("Java源文件被编译为能够被Java虚拟机执行的字节码文件")]),v._v(" "),a("p",[v._v("Java被设计成允许应用程序可以运行在任意平台，不需要单独编写或重新编译；因为Java虚拟机知道底层硬件平台的指令长度和其他特性。")]),v._v(" "),a("h3",{attrs:{id:"jdk新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk新特性"}},[v._v("#")]),v._v(" JDK新特性")]),v._v(" "),a("p",[v._v("JDK8")]),v._v(" "),a("ol",[a("li",[v._v("接口的默认方法")]),v._v(" "),a("li",[v._v("Lambda表达式：对匿名比较器的简化")]),v._v(" "),a("li",[v._v("函数式接口：仅仅只包含一个抽象方法的接口")]),v._v(" "),a("li",[v._v("::关键字 传递方法或构造函数引用")]),v._v(" "),a("li",[v._v("多重注解")]),v._v(" "),a("li",[v._v("其他...")])]),v._v(" "),a("p",[v._v("JDK8引入的重要特性：Lambda表达式和集合之流式操作，怎么使用这些")]),v._v(" "),a("h3",{attrs:{id:"java和c-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java和c-区别"}},[v._v("#")]),v._v(" Java和C++区别")]),v._v(" "),a("ul",[a("li",[v._v("面向对象的语言，支持封装、继承、多态")]),v._v(" "),a("li",[v._v("Java不提供指针来直接访问内存，内存更安全")]),v._v(" "),a("li",[v._v("Java类单继承，C++支持多继承，Java的接口支持多继承")]),v._v(" "),a("li",[v._v("Java有自动内存管理机制，不需要手动释放无用内存")])]),v._v(" "),a("h2",{attrs:{id:"字节码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节码"}},[v._v("#")]),v._v(" 字节码")]),v._v(" "),a("h3",{attrs:{id:"什么是字节码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码"}},[v._v("#")]),v._v(" 什么是字节码")]),v._v(" "),a("p",[v._v("供虚拟机理解的代码叫字节码即.class文件")]),v._v(" "),a("p",[v._v("Java源代码->编译器->JVM可执行的Java字节码(即虚拟指令)->JVM->JVM中解释器->机器可执行的二进制机器码->程序运行")]),v._v(" "),a("h3",{attrs:{id:"使用字节码的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用字节码的好处"}},[v._v("#")]),v._v(" 使用字节码的好处")]),v._v(" "),a("p",[v._v("比解释型语言(如PHP、Python)执行效率高，并且可移植，并且无需重新编译便可在不同计算机上运行。")]),v._v(" "),a("p",[v._v("解释型语言：在运行时将程序翻译成机器语言，效率较低。")]),v._v(" "),a("h2",{attrs:{id:"java数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java数据类型"}},[v._v("#")]),v._v(" Java数据类型")]),v._v(" "),a("p",[v._v("Java支持的数据类型包括基本数据类型和引用类型")]),v._v(" "),a("ul",[a("li",[v._v("基本类型：\n"),a("ul",[a("li",[v._v("整数值型：byte、short、int、long")]),v._v(" "),a("li",[v._v("字符型：char")]),v._v(" "),a("li",[v._v("浮点类型：float、double")]),v._v(" "),a("li",[v._v("布尔型：boolean")]),v._v(" "),a("li",[v._v("整数型：默认int型，小数默认double型，Float和Long类型的必须加后缀。比如：float f = 100f;")])])]),v._v(" "),a("li",[v._v("引用类型：该变量在内存中实际存储的是一个引用地址，实际在堆中\n"),a("ul",[a("li",[v._v("引用类型包括类、接口、数组等")]),v._v(" "),a("li",[v._v("String是引用类型不是基本类型")])])])]),v._v(" "),a("table",[a("thead",[a("tr",[a("th",[v._v("基本类型")]),v._v(" "),a("th",[v._v("包装类型")])])]),v._v(" "),a("tbody",[a("tr",[a("td",[v._v("byte")]),v._v(" "),a("td",[v._v("Byte")])]),v._v(" "),a("tr",[a("td",[v._v("short")]),v._v(" "),a("td",[v._v("Short")])]),v._v(" "),a("tr",[a("td",[v._v("int")]),v._v(" "),a("td",[v._v("Integer")])]),v._v(" "),a("tr",[a("td",[v._v("long")]),v._v(" "),a("td",[v._v("Long")])]),v._v(" "),a("tr",[a("td",[v._v("float")]),v._v(" "),a("td",[v._v("Float")])]),v._v(" "),a("tr",[a("td",[v._v("double")]),v._v(" "),a("td",[v._v("Double")])]),v._v(" "),a("tr",[a("td",[v._v("boolean")]),v._v(" "),a("td",[v._v("Boolean")])]),v._v(" "),a("tr",[a("td",[v._v("char")]),v._v(" "),a("td",[v._v("Character")])])])]),v._v(" "),a("h3",{attrs:{id:"值传递和引用传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值传递和引用传递"}},[v._v("#")]),v._v(" 值传递和引用传递")]),v._v(" "),a("p",[v._v("值传递：基本型变量，传递的是该变量的一个副本，改变副本不影响原变量")]),v._v(" "),a("p",[v._v("引用传递：一般对象型变量，传递的是该对象地址的一个副本，而不是原对象本身")]),v._v(" "),a("p",[v._v("一般认为，Java内的传递都是值传递，Java中实例对象的传递是引用传递。")]),v._v(" "),a("h2",{attrs:{id:"string、stringbuffer、stringbuilder的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer、stringbuilder的区别"}},[v._v("#")]),v._v(" String、StringBuffer、StringBuilder的区别")]),v._v(" "),a("p",[v._v("String 是只读字符串，String引用的字符串是不可变的，每次对String类型进行改变的时候都会生成一个新的String对象，然后将指针指向新的String对象。")]),v._v(" "),a("p",[v._v("StringBuffer/StringBuilder类，表示的字符串对象可以直接进行修改，StringBuilder和StringBuffer的方法完全相同，区别是它在单线程环境下使用的，因为它没有被synchronized修饰的，因此它的效率也比StringBuffer高。")])])}),[],!1,null,null,null);_.default=r.exports}}]);