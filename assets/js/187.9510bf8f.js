(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{601:function(t,a,e){"use strict";e.r(a);var v=e(62),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_1-注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-注解"}},[t._v("#")]),t._v(" 1.注解")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/BPKvLbdCyuWijkD-si75Dw",target:"_blank",rel:"noopener noreferrer"}},[t._v("【对线面试官】今天来聊聊Java注解"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"什么是注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是注解"}},[t._v("#")]),t._v(" 什么是注解")]),t._v(" "),e("p",[t._v("​\t3y：")]),t._v(" "),e("p",[t._v("​\t\t注解：代码中的特殊标记，可以在编译、类加载、运行时被读取，并执行相对应的处理。")]),t._v(" "),e("p",[t._v("​\t菜鸟教程：")]),t._v(" "),e("p",[t._v("​\t\tJava 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。")]),t._v(" "),e("p",[t._v("​\t\tJava 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。")]),t._v(" "),e("h2",{attrs:{id:"开发时使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发时使用"}},[t._v("#")]),t._v(" 开发时使用")]),t._v(" "),e("p",[t._v("​\t3y:")]),t._v(" "),e("p",[t._v("​\t\tSpring相关：@Controller / @Param / @Select")]),t._v(" "),e("p",[t._v("​\t\tlombok：@Slf4j / @Data")]),t._v(" "),e("p",[t._v("​\t\t原生Java：@Overried / @Deprecated / @FunctionalInterface 多用于标记和检查")]),t._v(" "),e("p",[t._v("​\t\t原生Java除基本注解外，还有元Annotation（元注解），元注解就是来修饰注解的，常用元注解有@Retention和@Target")]),t._v(" "),e("p",[t._v("​\t\t@Retention注解可以理解为设置注解的生命周期，而@Target表示这个注解可以修饰哪些地方（比如方法、还是成员变量、还是包等）")]),t._v(" "),e("h2",{attrs:{id:"自定义注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义注解"}},[t._v("#")]),t._v(" 自定义注解")]),t._v(" "),e("p",[t._v("​\t3y：")]),t._v(" "),e("p",[t._v("​")])])}),[],!1,null,null,null);a.default=r.exports}}]);