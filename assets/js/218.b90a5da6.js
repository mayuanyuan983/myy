(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{631:function(n,t,a){"use strict";a.r(t);var e=a(62),o=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"channeloption配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption配置"}},[n._v("#")]),n._v(" ChannelOption配置")]),n._v(" "),a("h2",{attrs:{id:"channeloption-tcp-nodelay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-tcp-nodelay"}},[n._v("#")]),n._v(" ChannelOption.TCP_NODELAY")]),n._v(" "),a("p",[n._v("在有些网络通信的场景下，要求低延迟，这样就需要我们设置一些TCP的链接属性：")]),n._v(" "),a("p",[n._v("客户端")]),n._v(" "),a("p",[n._v("bootstap.option(ChannelOption.TCP_NODELAY, "),a("strong",[n._v("true")]),n._v(");")]),n._v(" "),a("p",[n._v("服务端")]),n._v(" "),a("p",[n._v("boot.childOption(ChannelOption.TCP_NODELAY, "),a("strong",[n._v("true")]),n._v(");")]),n._v(" "),a("p",[n._v("设置这样做好的好处就是禁用nagle算法")]),n._v(" "),a("p",[n._v("Nagle算法试图减少TCP包的数量和结构性开销, 将多个较小的包组合成较大的包进行发送.但这不是重点, 关键是这个算法受TCP延迟确认影响, 会导致相继两次向连接发送请求包,读数据时会有一个最多达500毫秒的延时")]),n._v(" "),a("p",[n._v("TCP/IP协议中，无论发送多少数据，总是要在数据前面加上协议头，同时，对方接收到数据，也需要发送ACK表示确认。为了尽可能的利用网络带宽，TCP总是希望尽可能的发送足够大的数据。（一个连接会设置MSS参数，因此，TCP/IP希望每次都能够以MSS尺寸的数据块来发送数据）。")]),n._v(" "),a("p",[n._v("Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。")]),n._v(" "),a("p",[n._v("ChannelOption.TCP_NODELAY参数对应于套接字选项中的TCP_NODELAY,该参数的使用与Nagle算法有关。Nagle算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次,因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，虽然该方式有效提高网络的有效负载，但是却造成了延时，而该参数的作用就是禁止使用Nagle算法，使用于小数据即时传输，于TCP_NODELAY相对应的是TCP_CORK，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。")]),n._v(" "),a("h2",{attrs:{id:"channeloption-so-keepalive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-so-keepalive"}},[n._v("#")]),n._v(" ChannelOption.SO_KEEPALIVE")]),n._v(" "),a("p",[n._v("Channeloption.SO_KEEPALIVE参数对应于套接字选项中的SO_KEEPALIVE，该参数用于设置TCP连接，当设置该选项以后，连接会测试链接的状态，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，TCP会自动发送一个活动探测数据报文。")]),n._v(" "),a("h2",{attrs:{id:"channeloption-so-sndbuf和channeloption-so-rcvbuf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-so-sndbuf和channeloption-so-rcvbuf"}},[n._v("#")]),n._v(" ChannelOption.SO_SNDBUF和ChannelOption.SO_RCVBUF")]),n._v(" "),a("p",[n._v("ChannelOption.SO_SNDBUF参数对应于套接字选项中的SO_SNDBUF，ChannelOption.SO_RCVBUF参数对应于套接字选项中的SO_RCVBUF这两个参数用于操作接收缓冲区和发送缓冲区的大小，接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成功，发送缓冲区用于保存发送数据，直到发送成功。")]),n._v(" "),a("h2",{attrs:{id:"channeloption-so-backlog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-so-backlog"}},[n._v("#")]),n._v(" ChannelOption.SO_BACKLOG")]),n._v(" "),a("p",[n._v("ChannelOption.SO_BACKLOG对应的是tcp/ip协议listen函数中的backlog参数，函数listen(int socketfd,int backlog)用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小。")]),n._v(" "),a("h2",{attrs:{id:"channeloption-so-reuseaddr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-so-reuseaddr"}},[n._v("#")]),n._v(" ChannelOption.SO_REUSEADDR")]),n._v(" "),a("p",[n._v("ChanneOption.SO_REUSEADDR对应于套接字选项中的SO_REUSEADDR，这个参数表示允许重复使用本地地址和端口，比如，某个服务器进程占用了TCP的80端口进行监听，此时再次监听该端口就会返回错误，使用该参数就可以解决问题，该参数允许共用该端口，这个在服务器程序中比较常使用，比如某个进程非正常退出，该程序占用的端口可能要被占用一段时间才能允许其他进程使用，而且程序死掉以后，内核一需要一定的时间才能够释放此端口，不设置SO_REUSEADDR就无法正常使用该端口。")]),n._v(" "),a("h2",{attrs:{id:"channeloption-so-linger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-so-linger"}},[n._v("#")]),n._v(" ChannelOption.SO_LINGER")]),n._v(" "),a("p",[n._v("ChannelOption.SO_LINGER参数对应于套接字选项中的SO_LINGER,Linux内核默认的处理方式是当用户调用close()方法的时候，函数返回，在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，使用SO_LINGER可以阻塞close()的调用时间，直到数据完全发送")]),n._v(" "),a("h2",{attrs:{id:"channeloption-allocator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloption-allocator"}},[n._v("#")]),n._v(" ChannelOption.ALLOCATOR")]),n._v(" "),a("p",[n._v("在4.x版本中，UnpooledByteBufAllocator是默认的allocator，尽管其存在某些限制。现在PooledByteBufAllocator已经广泛使用一段时间，并且我们有了增强的缓冲区泄漏追踪机制， 所以是时候让PooledByteBufAllocator成为默认了。\n总结：Netty4使用对象池，重用缓冲区。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("        设置参数说明：\n        ChannelOption.SO_BACKLOG:对应的是tcp/ip协议listen函数中的backlog参数，函数listen(int socketfd,int backlog)\n        用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，\n        服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小\n        ChannelOption.SO_REUSEADDR：表示允许重复使用本地地址和端口\n        ChannelOption.SO_KEEPALIVE：对应于套接字选项中的SO_KEEPALIVE，该参数用于设置TCP连接，当设置该选项以后，\n        连接会测试链接的状态，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，\n        TCP会自动发送一个活动探测数据报文。\n        ChannelOption.SO_SNDBUF：设置发送缓冲区的大小\n        ChannelOption.SO_RCVBUF：设置接收缓冲区的大小\n        ChannelOption.SO_LINGER：对应于套接字选项中的SO_LINGER,Linux内核默认的处理方式是当用户调用close（）方法的时候，函数返回，\n        在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，使用SO_LINGER可以阻塞close()的调用时间，\n        直到数据完全发送\n        ChannelOption.TCP_NODELAY：禁止使用Nagle算法，使用于小数据即时传输\n        ChannelOption.TCP_CORK：与NODELAY作用相反，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。\n        IP_TOS：IP参数，设置IP头部的Type-of-Service字段，用于描述IP包的优先级和QoS选项。\n        ALLOW_HALF_CLOSURE：Netty参数，一个连接的远端关闭时本地端是否关闭，默认值为False。值为False时，连接自动关闭；为True时，\n        触发ChannelInboundHandler的userEventTriggered()方法，事件为ChannelInputShutdownEvent。\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);