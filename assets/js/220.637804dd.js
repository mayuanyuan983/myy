(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{633:function(e,o,t){"use strict";t.r(o);var r=t(62),n=Object(r.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"初始化nioeventloopgroup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化nioeventloopgroup"}},[e._v("#")]),e._v(" 初始化NioEventLoopGroup")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/e435eb64772a",target:"_blank",rel:"noopener noreferrer"}},[e._v("Netty源码分析:1.1初始化NioEventLoopGroup"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"_1-new-nioeventloopgroup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-new-nioeventloopgroup"}},[e._v("#")]),e._v(" 1.new NioEventLoopGroup()")]),e._v(" "),t("p",[e._v("当我们调用new NioEventLoopGroup()时，NioEventLoopGroup 类将会自动调用自己的有参构造函数，并且调用父类的有参构造进行初始化。")]),e._v(" "),t("h3",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),t("p",[t("code",[e._v("int nThreads")]),e._v("   建立多少个线程数，如果传入是0.则默认是cpu*2的个数。")]),e._v(" "),t("p",[t("code",[e._v("Executor executor")]),e._v("   初始化是null")]),e._v(" "),t("p",[t("code",[e._v("SelectorProvider selectorProvider")]),e._v("   是一个"),t("code",[e._v("SelectorProvider.provider()")]),e._v("的返回值。")]),e._v(" "),t("p",[t("code",[e._v("RejectedExecutionHandler")]),e._v("   是一个处理异常的类")]),e._v(" "),t("h3",{attrs:{id:"注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意：")]),e._v(" "),t("p",[t("code",[e._v("SelectorProvider")]),e._v("就是为了创建DatagramChannel，Pipe，Selector，ServerSocketChannel，SocketChannel，System.inheritedChannel()而服务的")]),e._v(" "),t("h2",{attrs:{id:"multithreadeventloopgroup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multithreadeventloopgroup"}},[e._v("#")]),e._v(" MultithreadEventLoopGroup")]),e._v(" "),t("p",[e._v("父类进行初始化")]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("NioEventLoopGroup初始化：建立默认cup核数*2个的NioEventLoop。")]),e._v(" "),t("p",[e._v("当有一个channel新连接的时候，将该channel与一个NioEventLoop绑定，该channel的任务全部交给NioEventLoop执行了")]),e._v(" "),t("p",[e._v("NioEventLoopGroup是用来处理I/O操作的多线程事件循环器，Netty 提供了许多不同的 EventLoopGroup 的实现用来处理不同的传输。在这个例子中我们实现了一个服务端的应用，因此会有2个 NioEventLoopGroup 会被使用。第一个经常被叫做‘boss’，用来接收进来的连接。第二个经常被叫做‘worker’，用来处理已经被接收的连接，一旦‘boss’接收到连接，就会把连接信息注册到‘worker’上。如何知道多少个线程已经被使用，如何映射到已经创建的 Channel上都需要依赖于 EventLoopGroup 的实现，并且可以通过构造函数来配置他们的关系。")])])}),[],!1,null,null,null);o.default=n.exports}}]);