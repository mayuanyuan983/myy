{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{262:function(a,t,e){\"use strict\";e.r(t);var s=e(3),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"faq\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#faq\"}},[a._v(\"#\")]),a._v(\" FAQ\")]),a._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://www.yuque.com/easyexcel/faq\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"项目官方FAQ\"),e(\"OutboundLink\")],1)]),a._v(\" \"),e(\"h2\",{attrs:{id:\"_1-目前不支持功能\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-目前不支持功能\"}},[a._v(\"#\")]),a._v(\" 1.目前不支持功能\")]),a._v(\" \"),e(\"ol\",[e(\"li\",[a._v(\"单个文件的并发写入、读取\")]),a._v(\" \"),e(\"li\",[a._v(\"读取图片\")]),a._v(\" \"),e(\"li\",[a._v(\"宏\")]),a._v(\" \"),e(\"li\",[a._v(\"csv读取\")]),a._v(\" \"),e(\"li\",[a._v(\"图表写入、读取\")])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"_2-部分字段读取或者写入为空\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-部分字段读取或者写入为空\"}},[a._v(\"#\")]),a._v(\" 2.部分字段读取或者写入为空\")]),a._v(\" \"),e(\"ol\",[e(\"li\",[a._v(\"自己的变量命名是否为驼峰\")]),a._v(\" \"),e(\"li\",[a._v(\"变量不能以 \"),e(\"code\",[a._v(\"is\")]),a._v(\" 开头\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"lombok\")]),a._v(\"使用\"),e(\"code\",[a._v(\"@Data\")]),a._v(\"不能使用 \"),e(\"code\",[a._v(\"@Accessors(chain = true)\")])]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"set\")]),a._v(\" 方法不能有返回值\")])]),a._v(\" \"),e(\"p\",[a._v(\"用了 \"),e(\"code\",[a._v(\"cglib\")]),a._v(\" 拷贝 bean 的方法, \"),e(\"code\",[a._v(\"cglib\")]),a._v(\" 要求符合返回值为 \"),e(\"code\",[a._v(\"void\")]),a._v(\" 的 \"),e(\"code\",[a._v(\"setXXX\")]),a._v(\" 方法, 要支持 \"),e(\"code\",[a._v(\"@Accessors(chain = true)\")]),a._v(\", 要么换一种拷贝 bean 的方法, 要么改 \"),e(\"code\",[a._v(\"cglib\")])]),a._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://www.cnblogs.com/grey-wolf/p/11812528.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"就因为加了Lombok的@Accessors(chain = true)，bean拷贝工具类不干活了\"),e(\"OutboundLink\")],1)]),a._v(\" \"),e(\"h2\",{attrs:{id:\"_3-如何获取excel的总条数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-如何获取excel的总条数\"}},[a._v(\"#\")]),a._v(\" 3.如何获取excel的总条数\")]),a._v(\" \"),e(\"p\",[a._v(\"目前只能获取大概的条数（每个excel都会记录一个总条数，但是这个总条数由于各种空行等原因，不一定正确），无法精确获取，要精确获取的自己在监听器里面一条条统计。\")]),a._v(\" \"),e(\"p\",[a._v(\"在监听器里面，\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-java line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[e(\"code\",[a._v(\"analysisContext\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"readSheetHolder\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"getApproximateTotalRowNumber\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\")])]),a._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),e(\"br\")])]),e(\"h2\",{attrs:{id:\"_4-急速模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-急速模式\"}},[a._v(\"#\")]),a._v(\" 4.急速模式\")]),a._v(\" \"),e(\"p\",[a._v(\"03版没有办法处理，相对内存占用大很多。excel 07版本有个共享字符串\"),e(\"a\",{attrs:{href:\"https://docs.microsoft.com/zh-cn/office/open-xml/working-with-the-shared-string-table\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"共享字符串\"),e(\"OutboundLink\")],1),a._v(\"的概念，这个会非常占用内存，如果全部读取到内存的话，大概是excel文件的大小的3-10倍，所以easyexcel用存储文件的，然后再反序列化去读取的策略来节约内存。当然需要通过文件反序列化以后，效率会降低，大概降低30-50%（不一定，也看命中率，可能会超过100%）\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"如果对读取效率感觉还能接受-就用默认的-永久占用-单个excel读取整个过程-一般不会超过50m-大概率就30m-剩下临时的gc会很快回收\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如果对读取效率感觉还能接受-就用默认的-永久占用-单个excel读取整个过程-一般不会超过50m-大概率就30m-剩下临时的gc会很快回收\"}},[a._v(\"#\")]),a._v(\" 如果对读取效率感觉还能接受，就用默认的，永久占用（单个excel读取整个过程）一般不会超过50M(大概率就30M)，剩下临时的GC会很快回收\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"默认大文件处理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#默认大文件处理\"}},[a._v(\"#\")]),a._v(\" 默认大文件处理\")]),a._v(\" \"),e(\"p\",[a._v(\"默认大文件处理会自动判断，共享字符串5M以下会使用内存存储，大概占用15-50M的内存,超过5M则使用文件存储，然后文件存储也要设置多内存M用来存放临时的共享字符串，默认20M。除了共享字符串占用内存外，其他占用较少，所以可以预估10M，所以默认大概30M就能读取一个超级大的文件。\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"开启急速模式-如果最大文件条数也就十几二十万-然后excel也就是十几二十m-而且不会有很高的并发-并且内存也较大\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开启急速模式-如果最大文件条数也就十几二十万-然后excel也就是十几二十m-而且不会有很高的并发-并且内存也较大\"}},[a._v(\"#\")]),a._v(\" 开启急速模式，如果最大文件条数也就十几二十万，然后excel也就是十几二十M，而且不会有很高的并发，并且内存也较大\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-java line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 强制使用内存存储，这样大概一个20M的excel使用150M（很多临时对象，所以100M会一直GC）的内存\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 这样效率会比上面的复杂的策略高很多\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 这里再说明下 就是加了个readCache(new MapCache()) 参数而已，其他的参照其他demo写 这里没有写全 \")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"EasyExcel\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"read\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"readCache\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"MapCache\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\")])]),a._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),e(\"br\")])])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}