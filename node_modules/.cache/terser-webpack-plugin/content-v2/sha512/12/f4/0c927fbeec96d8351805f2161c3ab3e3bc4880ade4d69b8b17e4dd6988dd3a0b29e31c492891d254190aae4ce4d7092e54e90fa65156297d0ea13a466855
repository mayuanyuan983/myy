{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{258:function(e,n,r){\"use strict\";r.r(n);var o=r(3),t=Object(o.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"value\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#value\"}},[e._v(\"#\")]),e._v(\" @Value\")]),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://blog.csdn.net/likun557/article/details/105648757?utm_medium=distribute.pc_feed.none-task-blog-alirecmd-6.nonecase&depth_1-utm_source=distribute.pc_feed.none-task-blog-alirecmd-6.nonecase&request_id=\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"太狠了，疫情期间面试，一个问题砍了我5000！\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[e._v(\"这次面试问题如下\\n@Value的用法\")]),e._v(\" \"),r(\"p\",[e._v(\"@Value数据来源\")]),e._v(\" \"),r(\"p\",[e._v(\"@Value动态刷新的问题\")]),e._v(\" \"),r(\"p\",[e._v(\"下面我们一个个来整理一下，将这几个问题搞定，助大家在疫情期间面试能够过关斩将，拿高薪。\")]),e._v(\" \"),r(\"p\",[e._v(\"@Value的用法\\n系统中需要连接db，连接db有很多配置信息。\")]),e._v(\" \"),r(\"p\",[e._v(\"系统中需要发送邮件，发送邮件需要配置邮件服务器的信息。\")]),e._v(\" \"),r(\"p\",[e._v(\"还有其他的一些配置信息。\")]),e._v(\" \"),r(\"p\",[e._v(\"我们可以将这些配置信息统一放在一个配置文件中，上线的时候由运维统一修改。\")]),e._v(\" \"),r(\"p\",[e._v(\"那么系统中如何使用这些配置信息呢，spring中提供了@Value注解来解决这个问题。\")]),e._v(\" \"),r(\"p\",[e._v(\"通常我们会将配置信息以key=value的形式存储在properties配置文件中。\")]),e._v(\" \"),r(\"p\",[e._v('通过@Value(\"${配置文件中的key}\")来引用指定的key对应的value。')]),e._v(\" \"),r(\"p\",[e._v(\"@Value使用步骤\\n步骤一：使用@PropertySource注解引入配置文件\\n将@PropertySource放在类上面，如下\")]),e._v(\" \"),r(\"p\",[e._v('@PropertySource({\"配置文件路径1\",\"配置文件路径2\"...})\\n@PropertySource注解有个value属性，字符串数组类型，可以用来指定多个配置文件的路径。')]),e._v(\" \"),r(\"p\",[e._v(\"如：\")]),e._v(\" \"),r(\"p\",[e._v('@Component\\n@PropertySource({\"classpath:com/javacode2018/lesson002/demo18/db.properties\"})\\npublic class DbConfig {\\n}\\n步骤二：使用@Value注解引用配置文件的值\\n通过@Value引用上面配置文件中的值：')]),e._v(\" \"),r(\"p\",[e._v(\"语法\")]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${配置文件中的key:默认值}\")\\n@Value(\"${配置文件中的key}\")\\n如：')]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${password:123}\")\\n上面如果password不存在，将123作为值')]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${password}\")\\n上面如果password不存在，值为${password}')]),e._v(\" \"),r(\"p\",[e._v(\"假如配置文件如下\")]),e._v(\" \"),r(\"p\",[e._v(\"jdbc.url=jdbc:mysql://localhost:3306/javacode2018?characterEncoding=UTF-8\\njdbc.username=javacode\\njdbc.password=javacode\\n使用方式如下：\")]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${jdbc.url}\")\\nprivate String url;')]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${jdbc.username}\")\\nprivate String username;')]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${jdbc.password}\")\\nprivate String password;\\n下面来看案例')]),e._v(\" \"),r(\"p\",[e._v(\"案例\\n来个配置文件db.properties\\njdbc.url=jdbc:mysql://localhost:3306/javacode2018?characterEncoding=UTF-8\\njdbc.username=javacode\\njdbc.password=javacode\\n来个配置类，使用@PropertySource引入上面的配置文件\\npackage com.javacode2018.lesson002.demo18.test1;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.annotation.Configurable;\\nimport org.springframework.context.annotation.ComponentScan;\\nimport org.springframework.context.annotation.PropertySource;\")]),e._v(\" \"),r(\"p\",[e._v('@Configurable\\n@ComponentScan\\n@PropertySource({\"classpath:com/javacode2018/lesson002/demo18/db.properties\"})\\npublic class MainConfig1 {\\n}\\n来个类，使用@Value来使用配置文件中的信息\\npackage com.javacode2018.lesson002.demo18.test1;')]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Component;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Component\\npublic class DbConfig {\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v(\"@Value(\\\"${jdbc.url}\\\")\\nprivate String url;\\n \\n@Value(\\\"${jdbc.username}\\\")\\nprivate String username;\\n \\n@Value(\\\"${jdbc.password}\\\")\\nprivate String password;\\n \\npublic String getUrl() {\\n    return url;\\n}\\n \\npublic void setUrl(String url) {\\n    this.url = url;\\n}\\n \\npublic String getUsername() {\\n    return username;\\n}\\n \\npublic void setUsername(String username) {\\n    this.username = username;\\n}\\n \\npublic String getPassword() {\\n    return password;\\n}\\n \\npublic void setPassword(String password) {\\n    this.password = password;\\n}\\n \\n@Override\\npublic String toString() {\\n    return \\\"DbConfig{\\\" +\\n            \\\"url='\\\" + url + '\\\\'' +\\n            \\\", username='\\\" + username + '\\\\'' +\\n            \\\", password='\\\" + password + '\\\\'' +\\n            '}';\\n}\\n\")])])]),r(\"p\",[e._v(\"}\\n上面重点在于注解@Value注解，注意@Value注解中的\")]),e._v(\" \"),r(\"p\",[e._v(\"来个测试用例\\npackage com.javacode2018.lesson002.demo18;\")]),e._v(\" \"),r(\"p\",[e._v(\"import com.javacode2018.lesson002.demo18.test1.DbConfig;\\nimport com.javacode2018.lesson002.demo18.test1.MainConfig1;\\nimport org.junit.Test;\\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\")]),e._v(\" \"),r(\"p\",[e._v(\"public class ValueTest {\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v(\"@Test\\npublic void test1() {\\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\\n    context.register(MainConfig1.class);\\n    context.refresh();\\n \\n    DbConfig dbConfig = context.getBean(DbConfig.class);\\n    System.out.println(dbConfig);\\n}\\n\")])])]),r(\"p\",[e._v(\"}\\n运行输出\\nDbConfig{url='jdbc:mysql://localhost:3306/javacode2018?characterEncoding=UTF-8', username='javacode', password='javacode'}\\n上面用起来比较简单，很多用过的人看一眼就懂了，这也是第一个问题，多数人都是ok的，下面来看@Value中数据来源除了配置文件的方式，是否还有其他方式。\")]),e._v(\" \"),r(\"p\",[e._v(\"@Value数据来源\\n通常情况下我们@Value的数据来源于配置文件，不过，还可以用其他方式，比如我们可以将配置文件的内容放在数据库，这样修改起来更容易一些。\")]),e._v(\" \"),r(\"p\",[e._v(\"我们需要先了解一下@Value中数据来源于spring的什么地方。\")]),e._v(\" \"),r(\"p\",[e._v(\"spring中有个类\")]),e._v(\" \"),r(\"p\",[e._v(\"org.springframework.core.env.PropertySource\\n可以将其理解为一个配置源，里面包含了key->value的配置信息，可以通过这个类中提供的方法获取key对应的value信息\")]),e._v(\" \"),r(\"p\",[e._v(\"内部有个方法：\")]),e._v(\" \"),r(\"p\",[e._v(\"public abstract Object getProperty(String name);\\n通过name获取对应的配置信息。\")]),e._v(\" \"),r(\"p\",[e._v(\"系统有个比较重要的接口\")]),e._v(\" \"),r(\"p\",[e._v(\"org.springframework.core.env.Environment\\n用来表示环境配置信息，这个接口有几个方法比较重要\")]),e._v(\" \"),r(\"p\",[e._v(\"String resolvePlaceholders(String text);\\nMutablePropertySources getPropertySources();\\nresolvePlaceholders用来解析${text}的，@Value注解最后就是调用这个方法来解析的。\")]),e._v(\" \"),r(\"p\",[e._v(\"getPropertySources返回MutablePropertySources对象，来看一下这个类\")]),e._v(\" \"),r(\"p\",[e._v(\"public class MutablePropertySources implements PropertySources {\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v(\"private final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();\\n\")])])]),r(\"p\",[e._v(\"}\\n内部包含一个propertySourceList列表。\")]),e._v(\" \"),r(\"p\",[e._v(\"spring容器中会有一个Environment对象，最后会调用这个对象的resolvePlaceholders方法解析@Value。\")]),e._v(\" \"),r(\"p\",[e._v(\"大家可以捋一下，最终解析@Value的过程：\")]),e._v(\" \"),r(\"ol\",[r(\"li\",[e._v(\"将@Value注解的value参数值作为Environment.resolvePlaceholders方法参数进行解析\")]),e._v(\" \"),r(\"li\",[e._v(\"Environment内部会访问MutablePropertySources来解析\")]),e._v(\" \"),r(\"li\",[e._v(\"MutablePropertySources内部有多个PropertySource，此时会遍历PropertySource列表，调用PropertySource.getProperty方法来解析key对应的值\\n通过上面过程，如果我们想改变@Value数据的来源，只需要将配置信息包装为PropertySource对象，丢到Environment中的MutablePropertySources内部就可以了。\")])]),e._v(\" \"),r(\"p\",[e._v(\"下面我们就按照这个思路来一个。\")]),e._v(\" \"),r(\"p\",[e._v(\"来个邮件配置信息类，内部使用@Value注入邮件配置信息\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test2;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Component;\")]),e._v(\" \"),r(\"p\",[e._v(\"/**\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[e._v(\"邮件配置信息\\n*/\\n@Component\\npublic class MailConfig {\")]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${mail.host}\")\\nprivate String host;')]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${mail.username}\")\\nprivate String username;')]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${mail.password}\")\\nprivate String password;')]),e._v(\" \"),r(\"p\",[e._v(\"public String getHost() {\\nreturn host;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"public void setHost(String host) {\\nthis.host = host;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"public String getUsername() {\\nreturn username;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"public void setUsername(String username) {\\nthis.username = username;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"public String getPassword() {\\nreturn password;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"public void setPassword(String password) {\\nthis.password = password;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"@Override\\npublic String toString() {\\nreturn \\\"MailConfig{\\\" +\\n\\\"host='\\\" + host + ''' +\\n\\\", username='\\\" + username + ''' +\\n\\\", password='\\\" + password + ''' +\\n'}';\\n}\\n}\\n再来个类DbUtil，getMailInfoFromDb方法模拟从db中获取邮件配置信息，存放在map中\")])])]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test2;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.util.HashMap;\\nimport java.util.Map;\")]),e._v(\" \"),r(\"p\",[e._v('public class DbUtil {\\n/**\\n* 模拟从db中获取邮件配置信息\\n*\\n* @return\\n*/\\npublic static Map<String, Object> getMailInfoFromDb() {\\nMap<String, Object> result = new HashMap<>();\\nresult.put(\"mail.host\", \"smtp.qq.com\");\\nresult.put(\"mail.username\", \"路人\");\\nresult.put(\"mail.password\", \"123\");\\nreturn result;\\n}\\n}\\n来个spring配置类')]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test2;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.context.annotation.ComponentScan;\\nimport org.springframework.context.annotation.Configuration;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Configuration\\n@ComponentScan\\npublic class MainConfig2 {\\n}\\n下面是重点代码\")]),e._v(\" \"),r(\"p\",[e._v(\"@Test\\npublic void test2() {\\nAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('/*下面这段是关键 start*/\\n//模拟从db中获取配置信息\\nMap<String, Object> mailInfoFromDb = DbUtil.getMailInfoFromDb();\\n//将其丢在MapPropertySource中（MapPropertySource类是spring提供的一个类，是PropertySource的子类）\\nMapPropertySource mailPropertySource = new MapPropertySource(\"mail\", mailInfoFromDb);\\n//将mailPropertySource丢在Environment中的PropertySource列表的第一个中，让优先级最高\\ncontext.getEnvironment().getPropertySources().addFirst(mailPropertySource);\\n/*上面这段是关键 end*/\\n \\ncontext.register(MainConfig2.class);\\ncontext.refresh();\\nMailConfig mailConfig = context.getBean(MailConfig.class);\\nSystem.out.println(mailConfig);\\n')])])]),r(\"p\",[e._v(\"}\\n注释比较详细，就不详细解释了。\")]),e._v(\" \"),r(\"p\",[e._v(\"直接运行，看效果\")]),e._v(\" \"),r(\"p\",[e._v(\"MailConfig{host='smtp.qq.com', username='路人', password='123'}\\n有没有感觉很爽，此时你们可以随意修改DbUtil.getMailInfoFromDb，具体数据是从db中来，来时从redis或者其他介质中来，任由大家发挥。\")]),e._v(\" \"),r(\"p\",[e._v(\"上面重点是下面这段代码，大家需要理解\")]),e._v(\" \"),r(\"p\",[e._v(\"/\"),r(\"em\",[e._v(\"下面这段是关键 start\")]),e._v('/\\n//模拟从db中获取配置信息\\nMap<String, Object> mailInfoFromDb = DbUtil.getMailInfoFromDb();\\n//将其丢在MapPropertySource中（MapPropertySource类是spring提供的一个类，是PropertySource的子类）\\nMapPropertySource mailPropertySource = new MapPropertySource(\"mail\", mailInfoFromDb);\\n//将mailPropertySource丢在Environment中的PropertySource列表的第一个中，让优先级最高\\ncontext.getEnvironment().getPropertySources().addFirst(mailPropertySource);\\n/'),r(\"em\",[e._v(\"上面这段是关键 end\")]),e._v(\"/\\n咱们继续看下一个问题\")]),e._v(\" \"),r(\"p\",[e._v(\"如果我们将配置信息放在db中，可能我们会通过一个界面来修改这些配置信息，然后保存之后，希望系统在不重启的情况下，让这些值在spring容器中立即生效。\")]),e._v(\" \"),r(\"p\",[e._v(\"@Value动态刷新的问题的问题，springboot中使用@RefreshScope实现了。\")]),e._v(\" \"),r(\"p\",[e._v(\"实现@Value动态刷新\\n先了解一个知识点\\n这块需要先讲一个知识点，用到的不是太多，所以很多人估计不太了解，但是非常重要的一个点，我们来看一下。\")]),e._v(\" \"),r(\"p\",[e._v(\"这个知识点是自定义bean作用域，对这块不了解的先看一下这篇文章：bean作用域详解\")]),e._v(\" \"),r(\"p\",[e._v(\"bean作用域中有个地方没有讲，来看一下@Scope这个注解的源码，有个参数是：\")]),e._v(\" \"),r(\"p\",[e._v(\"ScopedProxyMode proxyMode() default ScopedProxyMode.DEFAULT;\\n这个参数的值是个ScopedProxyMode类型的枚举，值有下面4中\")]),e._v(\" \"),r(\"p\",[e._v(\"public enum ScopedProxyMode {\\nDEFAULT,\\nNO,\\nINTERFACES,\\nTARGET_CLASS;\\n}\\n前面3个，不讲了，直接讲最后一个值是干什么的。\")]),e._v(\" \"),r(\"p\",[e._v(\"当@Scope中proxyMode为TARGET_CLASS的时候，会给当前创建的bean通过cglib生成一个代理对象，通过这个代理对象来访问目标bean对象。\")]),e._v(\" \"),r(\"p\",[e._v(\"理解起来比较晦涩，还是来看代码吧，容易理解一些，来个自定义的Scope案例。\")]),e._v(\" \"),r(\"p\",[e._v(\"自定义一个bean作用域的注解\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test3;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.context.annotation.Scope;\\nimport org.springframework.context.annotation.ScopedProxyMode;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.lang.annotation.*;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Target({ElementType.TYPE, ElementType.METHOD})\\n@Retention(RetentionPolicy.RUNTIME)\\n@Documented\\n@Scope(BeanMyScope.SCOPE_MY) //@1\\npublic @interface MyScope {\\n/**\\n* @see Scope#proxyMode()\\n*/\\nScopedProxyMode proxyMode() default ScopedProxyMode.TARGET_CLASS;//@2\\n}\\n@1：使用了@Scope注解，value为引用了一个常量，值为my，一会下面可以看到。\")]),e._v(\" \"),r(\"p\",[e._v(\"@2：注意这个地方，参数名称也是proxyMode，类型也是ScopedProxyMode，而@Scope注解中有个和这个同样类型的参数，spring容器解析的时候，会将这个参数的值赋给@MyScope注解上面的@Scope注解的proxyMode参数，所以此处我们设置proxyMode值，最后的效果就是直接改变了@Scope中proxyMode参数的值。此处默认值取的是ScopedProxyMode.TARGET_CLASS\")]),e._v(\" \"),r(\"p\",[e._v(\"@MyScope注解对应的Scope实现如下\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test3;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.ObjectFactory;\\nimport org.springframework.beans.factory.config.Scope;\\nimport org.springframework.lang.Nullable;\")]),e._v(\" \"),r(\"p\",[e._v(\"/**\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[e._v(\"@see MyScope 作用域的实现\\n*/\\npublic class BeanMyScope implements Scope {\")]),e._v(\" \"),r(\"p\",[e._v('public static final String SCOPE_MY = \"my\"; //@1')]),e._v(\" \"),r(\"p\",[e._v('@Override\\npublic Object get(String name, ObjectFactory<?> objectFactory) {\\nSystem.out.println(\"BeanMyScope >>>>>>>>> get:\" + name); //@2\\nreturn objectFactory.getObject(); //@3\\n}')]),e._v(\" \"),r(\"p\",[e._v(\"@Nullable\\n@Override\\npublic Object remove(String name) {\\nreturn null;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"@Override\\npublic void registerDestructionCallback(String name, Runnable callback) {\")]),e._v(\" \"),r(\"p\",[e._v(\"}\")]),e._v(\" \"),r(\"p\",[e._v(\"@Nullable\\n@Override\\npublic Object resolveContextualObject(String key) {\\nreturn null;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"@Nullable\\n@Override\\npublic String getConversationId() {\\nreturn null;\\n}\\n}\\n@1：定义了一个常量，作为作用域的值\")])])]),e._v(\" \"),r(\"p\",[e._v(\"@2：这个get方法是关键，自定义作用域会自动调用这个get方法来创建bean对象，这个地方输出了一行日志，为了一会方便看效果\")]),e._v(\" \"),r(\"p\",[e._v(\"@3：通过objectFactory.getObject()获取bean实例返回。\")]),e._v(\" \"),r(\"p\",[e._v(\"下面来创建个类，作用域为上面自定义的作用域\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test3;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.stereotype.Component;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.util.UUID;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Component\\n@MyScope //@1\\npublic class User {\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('private String username;\\n \\npublic User() { \\n    System.out.println(\"---------创建User对象\" + this); //@2\\n    this.username = UUID.randomUUID().toString(); //@3\\n}\\n \\npublic String getUsername() {\\n    return username;\\n}\\n \\npublic void setUsername(String username) {\\n    this.username = username;\\n}\\n')])])]),r(\"p\",[e._v(\"}\\n@1：使用了自定义的作用域@MyScope\")]),e._v(\" \"),r(\"p\",[e._v(\"@2：构造函数中输出一行日志\")]),e._v(\" \"),r(\"p\",[e._v(\"@3：给username赋值，通过uuid随机生成了一个\")]),e._v(\" \"),r(\"p\",[e._v(\"来个spring配置类，加载上面@Compontent标注的组件\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test3;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.context.annotation.ComponentScan;\\nimport org.springframework.context.annotation.Configuration;\")]),e._v(\" \"),r(\"p\",[e._v(\"@ComponentScan\\n@Configuration\\npublic class MainConfig3 {\\n}\\n下面重点来了，测试用例\")]),e._v(\" \"),r(\"p\",[e._v(\"@Test\\npublic void test3() throws InterruptedException {\\nAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\\n//将自定义作用域注册到spring容器中\\ncontext.getBeanFactory().registerScope(BeanMyScope.SCOPE_MY, new BeanMyScope());//@1\\ncontext.register(MainConfig3.class);\\ncontext.refresh();\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('System.out.println(\"从容器中获取User对象\");\\nUser user = context.getBean(User.class); //@2\\nSystem.out.println(\"user对象的class为：\" + user.getClass()); //@3\\n \\nSystem.out.println(\"多次调用user的getUsername感受一下效果\\\\n\");\\nfor (int i = 1; i <= 3; i++) {\\n    System.out.println(String.format(\"********\\\\n第%d次开始调用getUsername\", i));\\n    System.out.println(user.getUsername());\\n    System.out.println(String.format(\"第%d次调用getUsername结束\\\\n********\\\\n\", i));\\n}\\n')])])]),r(\"p\",[e._v(\"}\\n@1：将自定义作用域注册到spring容器中\")]),e._v(\" \"),r(\"p\",[e._v(\"@2：从容器中获取User对应的bean\")]),e._v(\" \"),r(\"p\",[e._v(\"@3：输出这个bean对应的class，一会认真看一下，这个类型是不是User类型的\")]),e._v(\" \"),r(\"p\",[e._v(\"代码后面又搞了3次循环，调用user的getUsername方法，并且方法前后分别输出了一行日志。\")]),e._v(\" \"),r(\"p\",[e._v(\"见证奇迹的时候到了，运行输出\")]),e._v(\" \"),r(\"p\",[e._v(\"从容器中获取User对象\\nuser对象的class为：class com.javacode2018.lesson002.demo18.test3.User$$EnhancerBySpringCGLIB$$80233127\\n多次调用user的getUsername感受一下效果\")]),e._v(\" \"),r(\"hr\"),e._v(\" \"),r(\"p\",[e._v(\"第1次开始调用getUsername\\nBeanMyScope >>>>>>>>> get:scopedTarget.user\\n---------创建User对象com.javacode2018.lesson002.demo18.test3.User@6a370f4\\n7b41aa80-7569-4072-9d40-ec9bfb92f438\\n第1次调用getUsername结束\")]),e._v(\" \"),r(\"hr\"),e._v(\" \"),r(\"hr\"),e._v(\" \"),r(\"p\",[e._v(\"第2次开始调用getUsername\\nBeanMyScope >>>>>>>>> get:scopedTarget.user\\n---------创建User对象com.javacode2018.lesson002.demo18.test3.User@1613674b\\n01d67154-95f6-44bb-93ab-05a34abdf51f\\n第2次调用getUsername结束\")]),e._v(\" \"),r(\"hr\"),e._v(\" \"),r(\"hr\"),e._v(\" \"),r(\"p\",[e._v(\"第3次开始调用getUsername\\nBeanMyScope >>>>>>>>> get:scopedTarget.user\\n---------创建User对象com.javacode2018.lesson002.demo18.test3.User@27ff5d15\\n76d0e86f-8331-4303-aac7-4acce0b258b8\\n第3次调用getUsername结束\")]),e._v(\" \"),r(\"hr\"),e._v(\" \"),r(\"p\",[e._v(\"从输出的前2行可以看出：\")]),e._v(\" \"),r(\"p\",[e._v(\"调用context.getBean(User.class)从容器中获取bean的时候，此时并没有调用User的构造函数去创建User对象\")]),e._v(\" \"),r(\"p\",[e._v(\"第二行输出的类型可以看出，getBean返回的user对象是一个cglib代理对象。\")]),e._v(\" \"),r(\"p\",[e._v(\"后面的日志输出可以看出，每次调用user.getUsername方法的时候，内部自动调用了BeanMyScope#get 方法和 User的构造函数。\")]),e._v(\" \"),r(\"p\",[e._v(\"通过上面的案例可以看出，当自定义的Scope中proxyMode=ScopedProxyMode.TARGET_CLASS的时候，会给这个bean创建一个代理对象，调用代理对象的任何方法，都会调用这个自定义的作用域实现类（上面的BeanMyScope）中get方法来重新来获取这个bean对象。\")]),e._v(\" \"),r(\"p\",[e._v(\"动态刷新@Value具体实现\\n那么我们可以利用上面讲解的这种特性来实现@Value的动态刷新，可以实现一个自定义的Scope，这个自定义的Scope支持@Value注解自动刷新，需要使用@Value注解自动刷新的类上面可以标注这个自定义的注解，当配置修改的时候，调用这些bean的任意方法的时候，就让spring重启初始化一下这个bean，这个思路就可以实现了，下面我们来写代码。\")]),e._v(\" \"),r(\"p\",[e._v(\"先来自定义一个Scope：RefreshScope\\npackage com.javacode2018.lesson002.demo18.test4;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.context.annotation.Scope;\\nimport org.springframework.context.annotation.ScopedProxyMode;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.lang.annotation.*;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Target({ElementType.TYPE, ElementType.METHOD})\\n@Retention(RetentionPolicy.RUNTIME)\\n@Scope(BeanRefreshScope.SCOPE_REFRESH)\\n@Documented\\npublic @interface RefreshScope {\\nScopedProxyMode proxyMode() default ScopedProxyMode.TARGET_CLASS; //@1\\n}\\n要求标注@RefreshScope注解的类支持动态刷新@Value的配置\")]),e._v(\" \"),r(\"p\",[e._v(\"@1：这个地方是个关键，使用的是ScopedProxyMode.TARGET_CLASS\")]),e._v(\" \"),r(\"p\",[e._v(\"这个自定义Scope对应的解析类\\n下面类中有几个无关的方法去掉了，可以忽略\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test4;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.ObjectFactory;\\nimport org.springframework.beans.factory.config.Scope;\\nimport org.springframework.lang.Nullable;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.util.concurrent.ConcurrentHashMap;\")]),e._v(\" \"),r(\"p\",[e._v(\"public class BeanRefreshScope implements Scope {\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('public static final String SCOPE_REFRESH = \"refresh\";\\n \\nprivate static final BeanRefreshScope INSTANCE = new BeanRefreshScope();\\n \\n//来个map用来缓存bean\\nprivate ConcurrentHashMap<String, Object> beanMap = new ConcurrentHashMap<>(); //@1\\n \\nprivate BeanRefreshScope() {\\n}\\n \\npublic static BeanRefreshScope getInstance() {\\n    return INSTANCE;\\n}\\n \\n/**\\n * 清理当前\\n */\\npublic static void clean() {\\n    INSTANCE.beanMap.clear();\\n}\\n \\n@Override\\npublic Object get(String name, ObjectFactory<?> objectFactory) {\\n    Object bean = beanMap.get(name);\\n    if (bean == null) {\\n        bean = objectFactory.getObject();\\n        beanMap.put(name, bean);\\n    }\\n    return bean;\\n}\\n')])])]),r(\"p\",[e._v(\"}\\n上面的get方法会先从beanMap中获取，获取不到会调用objectFactory的getObject让spring创建bean的实例，然后丢到beanMap中\")]),e._v(\" \"),r(\"p\",[e._v(\"上面的clean方法用来清理beanMap中当前已缓存的所有bean\")]),e._v(\" \"),r(\"p\",[e._v(\"来个邮件配置类，使用@Value注解注入配置，这个bean作用域为自定义的@RefreshScope\\npackage com.javacode2018.lesson002.demo18.test4;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Component;\")]),e._v(\" \"),r(\"p\",[e._v(\"/**\")]),e._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[e._v(\"邮件配置信息\\n*/\\n@Component\\n@RefreshScope //@1\\npublic class MailConfig {\")]),e._v(\" \"),r(\"p\",[e._v('@Value(\"${mail.username}\") //@2\\nprivate String username;')]),e._v(\" \"),r(\"p\",[e._v(\"public String getUsername() {\\nreturn username;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"public void setUsername(String username) {\\nthis.username = username;\\n}\")]),e._v(\" \"),r(\"p\",[e._v(\"@Override\\npublic String toString() {\\nreturn \\\"MailConfig{\\\" +\\n\\\"username='\\\" + username + ''' +\\n'}';\\n}\\n}\\n@1：使用了自定义的作用域@RefreshScope\")])])]),e._v(\" \"),r(\"p\",[e._v(\"@2：通过@Value注入mail.username对一个的值\")]),e._v(\" \"),r(\"p\",[e._v(\"重写了toString方法，一会测试时候可以看效果。\")]),e._v(\" \"),r(\"p\",[e._v(\"再来个普通的bean，内部会注入MailConfig\\npackage com.javacode2018.lesson002.demo18.test4;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Component;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Component\\npublic class MailService {\\n@Autowired\\nprivate MailConfig mailConfig;\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('@Override\\npublic String toString() {\\n    return \"MailService{\" +\\n            \"mailConfig=\" + mailConfig +\\n            \\'}\\';\\n}\\n')])])]),r(\"p\",[e._v(\"}\\n代码比较简单，重写了toString方法，一会测试时候可以看效果。\")]),e._v(\" \"),r(\"p\",[e._v(\"来个类，用来从db中获取邮件配置信息\\npackage com.javacode2018.lesson002.demo18.test4;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.UUID;\")]),e._v(\" \"),r(\"p\",[e._v('public class DbUtil {\\n/**\\n* 模拟从db中获取邮件配置信息\\n*\\n* @return\\n*/\\npublic static Map<String, Object> getMailInfoFromDb() {\\nMap<String, Object> result = new HashMap<>();\\nresult.put(\"mail.username\", UUID.randomUUID().toString());\\nreturn result;\\n}\\n}\\n来个spring配置类，扫描加载上面的组件\\npackage com.javacode2018.lesson002.demo18.test4;')]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.context.annotation.ComponentScan;\\nimport org.springframework.context.annotation.Configuration;\")]),e._v(\" \"),r(\"p\",[e._v(\"@Configuration\\n@ComponentScan\\npublic class MainConfig4 {\\n}\\n来个工具类\\n内部有2个方法，如下：\")]),e._v(\" \"),r(\"p\",[e._v(\"package com.javacode2018.lesson002.demo18.test4;\")]),e._v(\" \"),r(\"p\",[e._v(\"import org.springframework.context.support.AbstractApplicationContext;\\nimport org.springframework.core.env.MapPropertySource;\")]),e._v(\" \"),r(\"p\",[e._v(\"import java.util.Map;\")]),e._v(\" \"),r(\"p\",[e._v(\"public class RefreshConfigUtil {\\n/**\\n* 模拟改变数据库中都配置信息\\n*/\\npublic static void updateDbConfig(AbstractApplicationContext context) {\\n//更新context中的mailPropertySource配置信息\\nrefreshMailPropertySource(context);\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('    //清空BeanRefreshScope中所有bean的缓存\\n    BeanRefreshScope.getInstance().clean();\\n}\\n \\npublic static void refreshMailPropertySource(AbstractApplicationContext context) {\\n    Map<String, Object> mailInfoFromDb = DbUtil.getMailInfoFromDb();\\n    //将其丢在MapPropertySource中（MapPropertySource类是spring提供的一个类，是PropertySource的子类）\\n    MapPropertySource mailPropertySource = new MapPropertySource(\"mail\", mailInfoFromDb);\\n    context.getEnvironment().getPropertySources().addFirst(mailPropertySource);\\n}\\n')])])]),r(\"p\",[e._v(\"}\\nupdateDbConfig方法模拟修改db中配置的时候需要调用的方法，方法中2行代码，第一行代码调用refreshMailPropertySource方法修改容器中邮件的配置信息\")]),e._v(\" \"),r(\"p\",[e._v(\"BeanRefreshScope.getInstance().clean()用来清除BeanRefreshScope中所有已经缓存的bean，那么调用bean的任意方法的时候，会重新出发spring容器来创建bean，spring容器重新创建bean的时候，会重新解析@Value的信息，此时容器中的邮件配置信息是新的，所以@Value注入的信息也是新的。\")]),e._v(\" \"),r(\"p\",[e._v(\"来个测试用例\")]),e._v(\" \"),r(\"p\",[e._v(\"@Test\\npublic void test4() throws InterruptedException {\\nAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\\ncontext.getBeanFactory().registerScope(BeanRefreshScope.SCOPE_REFRESH, BeanRefreshScope.getInstance());\\ncontext.register(MainConfig4.class);\\n//刷新mail的配置到Environment\\nRefreshConfigUtil.refreshMailPropertySource(context);\\ncontext.refresh();\")]),e._v(\" \"),r(\"div\",{staticClass:\"language- extra-class\"},[r(\"pre\",[r(\"code\",[e._v('MailService mailService = context.getBean(MailService.class);\\nSystem.out.println(\"配置未更新的情况下,输出3次\");\\nfor (int i = 0; i < 3; i++) { //@1\\n    System.out.println(mailService);\\n    TimeUnit.MILLISECONDS.sleep(200);\\n}\\n \\nSystem.out.println(\"模拟3次更新配置效果\");\\nfor (int i = 0; i < 3; i++) { //@2\\n    RefreshConfigUtil.updateDbConfig(context); //@3\\n    System.out.println(mailService);\\n    TimeUnit.MILLISECONDS.sleep(200);\\n}\\n')])])]),r(\"p\",[e._v(\"}\\n@1：循环3次，输出mailService的信息\")]),e._v(\" \"),r(\"p\",[e._v(\"@2：循环3次，内部先通过@3来模拟更新db中配置信息，然后在输出mailService信息\")]),e._v(\" \"),r(\"p\",[e._v(\"见证奇迹的时刻，来看效果\\n配置未更新的情况下,输出3次\\nMailService{mailConfig=MailConfig{username='df321543-8ca7-4563-993a-bd64cbf50d53'}}\\nMailService{mailConfig=MailConfig{username='df321543-8ca7-4563-993a-bd64cbf50d53'}}\\nMailService{mailConfig=MailConfig{username='df321543-8ca7-4563-993a-bd64cbf50d53'}}\\n模拟3次更新配置效果\\nMailService{mailConfig=MailConfig{username='6bab8cea-9f4f-497d-a23a-92f15d0d6e34'}}\\nMailService{mailConfig=MailConfig{username='581bf395-f6b8-4b87-84e6-83d3c7342ca2'}}\\nMailService{mailConfig=MailConfig{username='db337f54-20b0-4726-9e55-328530af6999'}}\\n上面MailService输出了6次，前3次username的值都是一样的，后面3次username的值不一样了，说明修改配置起效了。\")]),e._v(\" \"),r(\"p\",[e._v(\"小结\\n动态@Value实现的关键是@Scope中proxyMode参数，值为ScopedProxyMode.DEFAULT，会生成一个代理，通过这个代理来实现@Value动态刷新的效果，这个地方是关键。\")]),e._v(\" \"),r(\"p\",[e._v(\"有兴趣的可以去看一下springboot中的@RefreshScope注解源码，和我们上面自定义的@RefreshScope类似，实现原理类似的。\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"案例源码\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#案例源码\"}},[e._v(\"#\")]),e._v(\" 案例源码\")]),e._v(\" \"),r(\"div\",{staticClass:\"language-go line-numbers-mode\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-go\"}},[r(\"code\",[e._v(\"https\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"/\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"/\")]),e._v(\"gitee\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),e._v(\"com\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"/\")]),e._v(\"javacode2018\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"/\")]),e._v(\"spring\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"-\")]),e._v(\"series\\n\")])]),e._v(\" \"),r(\"div\",{staticClass:\"line-numbers-wrapper\"},[r(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),r(\"br\")])])])}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}