{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{379:function(e,t,_){\"use strict\";_.r(t);var n=_(23),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[_(\"h1\",{attrs:{id:\"delete、truncate、drop的区别有哪些-该如何选择\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#delete、truncate、drop的区别有哪些-该如何选择\"}},[e._v(\"#\")]),e._v(\" delete、truncate、drop的区别有哪些，该如何选择\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"执行速度\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行速度\"}},[e._v(\"#\")]),e._v(\" 执行速度\")]),e._v(\" \"),_(\"p\",[e._v(\"drop > truncate >> DELETE\")]),e._v(\" \"),_(\"h3\",{attrs:{id:\"delete\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#delete\"}},[e._v(\"#\")]),e._v(\" DELETE\")]),e._v(\" \"),_(\"p\",[e._v(\"数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger（触发器）\")]),e._v(\" \"),_(\"p\",[e._v(\"SQL语言的分类\")]),e._v(\" \"),_(\"p\",[e._v(\"SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，数据定义语言DDL，数据控制语言DCL。\")]),e._v(\" \"),_(\"ol\",[_(\"li\",[e._v(\"数据查询语言DQL\\n数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE\\n子句组成的查询块：\\nSELECT <字段名表>\\nFROM <表或视图名>\\nWHERE <查询条件>\")])]),e._v(\" \"),_(\"p\",[e._v(\"2 .数据操纵语言DML\\n数据操纵语言DML主要有三种形式：\")]),e._v(\" \"),_(\"ol\",[_(\"li\",[e._v(\"插入：INSERT\")]),e._v(\" \"),_(\"li\",[e._v(\"更新：UPDATE\")]),e._v(\" \"),_(\"li\",[e._v(\"删除：DELETE\")])]),e._v(\" \"),_(\"ol\",{attrs:{start:\"3\"}},[_(\"li\",[e._v(\"数据定义语言DDL\\n数据定义语言DDL用来创建数据库中的各种对象-----表、视图、\\n索引、同义词、聚簇等如：\\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER\\n|      |      |      |      |\\n表   视图  索引  同义词  簇\")])]),e._v(\" \"),_(\"p\",[e._v(\"DDL操作是隐性提交的！不能rollback\")]),e._v(\" \"),_(\"ol\",{attrs:{start:\"4\"}},[_(\"li\",[e._v(\"数据控制语言DCL\\n数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制\\n数据库操纵事务发生的时间及效果，对数据库实行监视等。如：\")])]),e._v(\" \"),_(\"ol\",[_(\"li\",[e._v(\"GRANT：授权。\")]),e._v(\" \"),_(\"li\",[e._v(\"ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。\\n回滚---ROLLBACK\\n回滚命令使数据库状态回到上次最后提交的状态。其格式为：\\nSQL>ROLLBACK;\")]),e._v(\" \"),_(\"li\",[e._v(\"COMMIT [WORK]：提交。\\n在数据库的插入、删除和修改操作时，只有当事务在提交到数据库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看到所做的事情，别人只有在最后提交完成后才可以看到。提交数据有三种类型：显式提交、隐式提交及自动提交。下面分别说明这三种类型。\")])]),e._v(\" \"),_(\"p\",[e._v(\"(1) 显式提交\\n用COMMIT命令直接完成的提交为显式提交。其格式为：\\nSQL>COMMIT；\")]),e._v(\" \"),_(\"p\",[e._v(\"(2) 隐式提交\\n用SQL命令间接完成的提交为隐式提交。这些命令是：\\nALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，\\nEXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。\")]),e._v(\" \"),_(\"p\",[e._v(\"(3) 自动提交若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，\\n系统将自动进行提交，这就是自动提交。其格式为：\\nSQL>SET AUTOCOMMIT ON\")]),e._v(\" \"),_(\"p\",[e._v(\"还有事务控制语句TCL：\")]),e._v(\" \"),_(\"p\",[e._v(\"SAVEPOINT：保存点\")]),e._v(\" \"),_(\"p\",[e._v(\"ROLLBACK：回退到某点\")]),e._v(\" \"),_(\"p\",[e._v(\"COMMIT：提交事务\")]),e._v(\" \"),_(\"p\",[_(\"em\",[e._v(\"InnoDB\")]),e._v(\"，是MySQL的数据库引擎之一，现为MySQL的默认存储引擎，\")]),e._v(\" \"),_(\"p\",[e._v(\"在 InnoDB 中，DELETE其实并不会真的把数据删除，mysql 实际上只是给删除的数据打了个标记为已删除，因此 delete 删除表中的数据时，表文件在磁盘上所占空间不会变小，存储空间不会被释放，只是把删除的数据行设置为不可见。虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以重用这部分空间（重用 → 覆盖）。\")]),e._v(\" \"),_(\"p\",[e._v(\"DELETE执行时，会先将所删除数据缓存到rollback segement中，事务commit之后生效;\")]),e._v(\" \"),_(\"p\",[e._v(\"Rollback Segments是在你数据库中的一些存储空间，它用来临时的保存当数据库数据发生改变时的先前值，Rollback Segment主要有两个目的：\")]),e._v(\" \"),_(\"ol\",[_(\"li\",[e._v(\"如果因为某种原因或者其他用用户想要通过ROLLBACK声明来取消一个人的数据操作，数据就会复原到之前为改变时的值。这种情况只在transaction的过程中有效，如果用户执行了COMMIT命令，那么ROLLBACK SEGMENT里面的值就会标识为失效的，数据改变就将永久化。\")]),e._v(\" \"),_(\"li\",[e._v(\"另一个目的是当有并发的session访问了一个数据值改变但事务还没有提交的表。如果一个SELECT语句开始读取一个表同时一个事务也在修改这个表的值，那么修改前的值就会保存到rollback segment里面，SELECT语句也是从ROLLBACK SEGMENT里面读取表的值。\")])]),e._v(\" \"),_(\"p\",[e._v(\"delete from table_name删除表的全部数据,对于MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;\")]),e._v(\" \"),_(\"p\",[e._v(\"对于delete from table_name where xxx 带条件的删除, 不管是InnoDB还是MyISAM都不会释放磁盘空间;\")]),e._v(\" \"),_(\"p\",[e._v(\"delete操作以后使用 optimize table table_name 会立刻释放磁盘空间。不管是InnoDB还是MyISAM 。所以要想达到释放磁盘空间的目的，delete以后执行optimize table 操作。\")]),e._v(\" \"),_(\"p\",[e._v(\"optimize table table_name; //删除数据后的优化\")]),e._v(\" \"),_(\"p\",[e._v(\"示例：查看表占用硬盘空间大小的SQL语句如下：（用M做展示单位，数据库名：csjdemo，表名：demo2）\")]),e._v(\" \"),_(\"p\",[_(\"strong\",[e._v(\"select\")]),e._v(\" \"),_(\"strong\",[e._v(\"concat\")]),e._v(\"(\"),_(\"strong\",[e._v(\"round\")]),e._v(\"(\"),_(\"strong\",[e._v(\"sum\")]),e._v(\"(DATA_LENGTH/1024/1024),2),'M') \"),_(\"strong\",[e._v(\"as\")]),e._v(\" table_size\\n\"),_(\"strong\",[e._v(\"from\")]),e._v(\" information_schema.tables\\n\"),_(\"strong\",[e._v(\"where\")]),e._v(\" table_schema='csjdemo' \"),_(\"strong\",[e._v(\"AND\")]),e._v(\" table_name='demo2';\")]),e._v(\" \"),_(\"p\",[e._v(\"然后执行空间优化语句，以及执行后的表Size变化：\")]),e._v(\" \"),_(\"p\",[_(\"strong\",[e._v(\"optimize\")]),e._v(\" \"),_(\"strong\",[e._v(\"table\")]),e._v(\" demo2\")]),e._v(\" \"),_(\"p\",[e._v(\"delete 操作是一行一行执行删除的，并且同时将该行的的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作，生成的大量日志也会占用磁盘空间。\")]),e._v(\" \"),_(\"h3\",{attrs:{id:\"truncate\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#truncate\"}},[e._v(\"#\")]),e._v(\" truncate\")]),e._v(\" \"),_(\"p\",[e._v(\"1、truncate：属于数据库DDL定义语言，不走事务，原数据不放到 rollback segment 中，操作不触发 trigger。\")]),e._v(\" \"),_(\"p\",[e._v(\"执行后立即生效，无法找回\\n执行后立即生效，无法找回\\n执行后立即生效，无法找回\")]),e._v(\" \"),_(\"p\",[e._v(\"2、truncate table table_name 立刻释放磁盘空间 ，不管是 InnoDB和MyISAM 。truncate table其实有点类似于drop table 然后creat,只不过这个create table 的过程做了优化，比如表结构文件之前已经有了等等。所以速度上应该是接近drop table的速度;\")]),e._v(\" \"),_(\"p\",[e._v(\"3、truncate能够快速清空一个表。并且重置auto_increment的值。\")]),e._v(\" \"),_(\"p\",[e._v(\"但对于不同的类型存储引擎需要注意的地方是：\")]),e._v(\" \"),_(\"ul\",[_(\"li\",[e._v(\"对于MyISAM，truncate会重置auto_increment（自增序列）的值为1。而delete后表仍然保持auto_increment。\")]),e._v(\" \"),_(\"li\",[e._v(\"对于InnoDB，truncate会重置auto_increment的值为1。delete后表仍然保持auto_increment。但是在做delete整个表之后重启MySQL的话，则重启后的auto_increment会被置为1。\")])]),e._v(\" \"),_(\"p\",[e._v(\"也就是说，InnoDB的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始。实质上重启后的auto_increment会从 SELECT 1+MAX(ai_col) FROM t 开始。\")]),e._v(\" \"),_(\"p\",[e._v(\"4、小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\")]),e._v(\" \"),_(\"h3\",{attrs:{id:\"_3、drop\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、drop\"}},[e._v(\"#\")]),e._v(\" 3、drop\")]),e._v(\" \"),_(\"div\",{staticClass:\"language- line-numbers-mode\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[e._v(\"Drop table Tablename\\n\")])]),e._v(\" \"),_(\"div\",{staticClass:\"line-numbers-wrapper\"},[_(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),_(\"br\")])]),_(\"p\",[e._v(\"1、drop：属于数据库DDL定义语言，同Truncate；\")]),e._v(\" \"),_(\"p\",[e._v(\"执行后立即生效，无法找回\\n执行后立即生效，无法找回\\n执行后立即生效，无法找回\")]),e._v(\" \"),_(\"p\",[e._v(\"2、drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\")]),e._v(\" \"),_(\"p\",[e._v(\"3、小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\")]),e._v(\" \"),_(\"p\",[e._v(\"可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了\")])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}