{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{255:function(_,t,v){\"use strict\";v.r(t);var e=v(3),a=Object(e.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"版本管理\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#版本管理\"}},[_._v(\"#\")]),_._v(\" 版本管理\")]),_._v(\" \"),v(\"h2\",{attrs:{id:\"_1-回退版本\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-回退版本\"}},[_._v(\"#\")]),_._v(\" 1.回退版本\")]),_._v(\" \"),v(\"p\",[_._v(\"在Git中，HEAD表示当前版本，也就是最新的提交。\")]),_._v(\" \"),v(\"p\",[_._v(\"上一个版本是HEAD^\")]),_._v(\" \"),v(\"p\",[_._v(\"上上一个版本是HEAD^^\")]),_._v(\" \"),v(\"p\",[_._v(\"前一百个版本HEAR~100\")]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git reset\")])]),_._v(\" \"),v(\"p\",[_._v(\"回退上一个版本\"),v(\"code\",[_._v(\"git reset --hard HEAD^\")])]),_._v(\" \"),v(\"p\",[_._v(\"再还原为新版本，如果git bash没有关闭\")]),_._v(\" \"),v(\"p\",[_._v(\"git reset --hard 版本号\")]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git reflog\")]),_._v(\"记录每次的命令\")]),_._v(\" \"),v(\"p\",[_._v(\"可以使用它查看版本号，并还原\")]),_._v(\" \"),v(\"div\",{staticClass:\"custom-block tip\"},[v(\"p\",{staticClass:\"custom-block-title\"},[_._v(\"小结\")]),_._v(\" \"),v(\"ul\",[v(\"li\",[v(\"code\",[_._v(\"HEAD\")]),_._v(\"指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令\"),v(\"code\",[_._v(\"git reset --hard commit_id\")]),_._v(\"。\")]),_._v(\" \"),v(\"li\",[_._v(\"穿梭前，用\"),v(\"code\",[_._v(\"git log\")]),_._v(\"可以查看提交历史，以便确定要回退到哪个版本。\")]),_._v(\" \"),v(\"li\",[_._v(\"要重返未来，用\"),v(\"code\",[_._v(\"git reflog\")]),_._v(\"查看命令历史，以便确定要回到未来的哪个版本。\")])])]),_._v(\" \"),v(\"h2\",{attrs:{id:\"_2-暂存区和工作区\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-暂存区和工作区\"}},[_._v(\"#\")]),_._v(\" 2.暂存区和工作区\")]),_._v(\" \"),v(\"h3\",{attrs:{id:\"_2-1工作区-working-directory\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1工作区-working-directory\"}},[_._v(\"#\")]),_._v(\" 2.1工作区（Working Directory）\")]),_._v(\" \"),v(\"p\",[_._v(\"就是你在电脑里能看到的目录，比如我的\"),v(\"code\",[_._v(\"learngit\")]),_._v(\"文件夹就是一个工作区\")]),_._v(\" \"),v(\"h3\",{attrs:{id:\"_2-2版本库-repository\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2版本库-repository\"}},[_._v(\"#\")]),_._v(\" 2.2版本库（Repository）\")]),_._v(\" \"),v(\"p\",[_._v(\"工作区有一个隐藏目录\"),v(\"code\",[_._v(\".git\")]),_._v(\"，这个不算工作区，而是Git的版本库。\")]),_._v(\" \"),v(\"p\",[_._v(\"Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支\"),v(\"code\",[_._v(\"master\")]),_._v(\"，以及指向\"),v(\"code\",[_._v(\"master\")]),_._v(\"的一个指针叫\"),v(\"code\",[_._v(\"HEAD\")]),_._v(\"。\")]),_._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://www.liaoxuefeng.com/files/attachments/919020037470528/0\",alt:\"git-repo\"}})]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git add\")]),_._v(\"实际上就是把文件添加到暂存区\")]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git commit\")]),_._v(\"实际上就是把暂存区的文件提交到当前分支\")]),_._v(\" \"),v(\"p\",[_._v(\"在创建Git仓库时，Git默认给我们创建了分支master，所以目前\"),v(\"code\",[_._v(\"git commit\")]),_._v(\"就是在往master提交更改\")]),_._v(\" \"),v(\"p\",[_._v(\"需要修改的文件通通放到暂存区，一次性提交暂存区的所有修改\")]),_._v(\" \"),v(\"p\",[_._v(\"untracked：未跟踪\")]),_._v(\" \"),v(\"h2\",{attrs:{id:\"_3-管理修改\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-管理修改\"}},[_._v(\"#\")]),_._v(\" 3.管理修改\")]),_._v(\" \"),v(\"p\",[_._v(\"Git管理的是修改，不是文件\")]),_._v(\" \"),v(\"p\",[_._v(\"如果每次修改，没有用\"),v(\"code\",[_._v(\"git add\")]),_._v(\"到暂存区，就不会加入到commit中\")]),_._v(\" \"),v(\"h2\",{attrs:{id:\"_9-撤销修改\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-撤销修改\"}},[_._v(\"#\")]),_._v(\" 9.撤销修改\")]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git checkout -- file\")]),_._v(\"可以丢弃工作区的修改\")]),_._v(\" \"),v(\"p\",[_._v(\"命令\"),v(\"code\",[_._v(\"git checkout -- readme.txt\")]),_._v(\"意思就是，把\"),v(\"code\",[_._v(\"readme.txt\")]),_._v(\"文件在工作区的修改全部撤销，这里有两种情况：\")]),_._v(\" \"),v(\"p\",[_._v(\"一种是\"),v(\"code\",[_._v(\"readme.txt\")]),_._v(\"自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\")]),_._v(\" \"),v(\"p\",[_._v(\"一种是\"),v(\"code\",[_._v(\"readme.txt\")]),_._v(\"已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\")]),_._v(\" \"),v(\"p\",[_._v(\"总之，就是让这个文件回到最近一次\"),v(\"code\",[_._v(\"git commit\")]),_._v(\"或\"),v(\"code\",[_._v(\"git add\")]),_._v(\"时的状态。\")]),_._v(\" \"),v(\"p\",[_._v(\"从暂存区删除\"),v(\"code\",[_._v(\"git reset HEAD <file>\")])]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git reset\")]),_._v(\"命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用\"),v(\"code\",[_._v(\"HEAD\")]),_._v(\"时，表示最新的版本。\")]),_._v(\" \"),v(\"h2\",{attrs:{id:\"_5-删除文件\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-删除文件\"}},[_._v(\"#\")]),_._v(\" 5.删除文件\")]),_._v(\" \"),v(\"p\",[_._v(\"从版本库中删除该文件，用命令\"),v(\"code\",[_._v(\"git rm\")]),_._v(\"删掉，并且\"),v(\"code\",[_._v(\"git commit\")]),_._v(\"，会将工作区的一起删除\")]),_._v(\" \"),v(\"p\",[_._v(\"或者先手动删除文件，再从版本库删除\")]),_._v(\" \"),v(\"p\",[_._v(\"如果在工作区删错了文件\")]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git checkout -- test.txt\")]),_._v(\" 还在暂存区中，未被提交\")]),_._v(\" \"),v(\"p\",[_._v(\"如果已经提交，需要回退版本\")]),_._v(\" \"),v(\"p\",[v(\"code\",[_._v(\"git checkout\")]),_._v(\"其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\")]),_._v(\" \"),v(\"p\",[_._v(\"注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！\")]),_._v(\" \"),v(\"div\",{staticClass:\"custom-block danger\"},[v(\"p\",{staticClass:\"custom-block-title\"},[_._v(\"注意\")]),_._v(\" \"),v(\"p\",[_._v(\"命令\"),v(\"code\",[_._v(\"git rm\")]),_._v(\"用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失\"),v(\"strong\",[_._v(\"最近一次提交后你修改的内容\")]),_._v(\"。\")])])])}),[],!1,null,null,null);t.default=a.exports}}]);","extractedComments":[]}