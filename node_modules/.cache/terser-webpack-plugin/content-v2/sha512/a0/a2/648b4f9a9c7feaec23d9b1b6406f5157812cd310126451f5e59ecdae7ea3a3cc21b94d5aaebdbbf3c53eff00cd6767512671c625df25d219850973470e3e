{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{285:function(t,a,s){\"use strict\";s.r(a);var e=s(3),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"hibernate注解-主键\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hibernate注解-主键\"}},[t._v(\"#\")]),t._v(\" Hibernate注解——主键\")]),t._v(\" \"),s(\"p\",[t._v(\"@Id 标注用于声明一个实体类的属性映射为数据库的主键列。该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。 也可置于属性的getter方法之前。\")]),t._v(\" \"),s(\"p\",[t._v(\"@GeneratedValue 用于标注主键的生成策略，通过strategy 属性指定。默认情况下，JPA 自动选择一个最适合底层数据库的主键生成策略：SqlServer对应identity，MySQL 对应 auto increment。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Id\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@GeneratedValue\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"generator  \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"idStrategy\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@GenericGenerator\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"idStrategy\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" strategy \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"uuid\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" id\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\")])]),s(\"h2\",{attrs:{id:\"strategy-主键生成策略\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#strategy-主键生成策略\"}},[t._v(\"#\")]),t._v(\" strategy(主键生成策略)\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"native\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#native\"}},[t._v(\"#\")]),t._v(\" native\")]),t._v(\" \"),s(\"p\",[t._v(\"native为id自动生成策略，生成的是数字id，添加数据到MySQL数据库时不需要设置id的值,hibernate框架会帮你生成，但是会给框架执行时间造成压力。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"assigned\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#assigned\"}},[t._v(\"#\")]),t._v(\" assigned\")]),t._v(\" \"),s(\"p\",[t._v(\"assigned（手动委派）主键策略需要在添加数据时自己设置id，因为它不能自动生成id，不麻烦别人，自己动手。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"uuid\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#uuid\"}},[t._v(\"#\")]),t._v(\" uuid\")]),t._v(\" \"),s(\"p\",[t._v(\"uuid.hex程序会自动生成16进制uuid主键，添加数据到MySQL数据库时不需要设置id的值，如果将id设置为这种策略，那么实体类id属性必须要定义成字符串string类型，不然会报错。\")])])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}