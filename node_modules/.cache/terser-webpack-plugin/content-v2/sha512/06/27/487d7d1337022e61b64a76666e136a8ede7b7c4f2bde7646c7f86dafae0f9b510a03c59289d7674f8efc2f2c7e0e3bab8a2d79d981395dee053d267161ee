{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{291:function(e,s,n){\"use strict\";n.r(s);var r=n(3),t=Object(r.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"responsebody注解的使用\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#responsebody注解的使用\"}},[e._v(\"#\")]),e._v(\" @responseBody注解的使用\")]),e._v(\" \"),n(\"p\",[e._v(\"1、\")]),e._v(\" \"),n(\"p\",[e._v(\"@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML\")]),e._v(\" \"),n(\"p\",[e._v(\"数据，需要注意的呢，在使用此注解之后不会再走试图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。\")]),e._v(\" \"),n(\"p\",[e._v(\"2、\")]),e._v(\" \"),n(\"p\",[e._v('@RequestMapping(\"/login\")\\n　　@ResponseBody\\n　　public User login(User user){\\n　　　　return user;\\n　　}\\n　　User字段：userName pwd\\n　　那么在前台接收到的数据为：\\'{\"userName\":\"xxx\",\"pwd\":\"xxx\"}\\'')]),e._v(\" \"),n(\"p\",[e._v('效果等同于如下代码：\\n　　@RequestMapping(\"/login\")\\n　　public void login(User user, HttpServletResponse response){\\n　　　　response.getWriter.write(JSONObject.fromObject(user).toString());\\n　　}')])])}),[],!1,null,null,null);s.default=t.exports}}]);","extractedComments":[]}